[
  {
    "id": 2204,
    "status": 1,
    "orgId": 26656,
    "orgSlug": "allanhardy",
    "orgName": "Allan Hardy",
    "slug": "app-metrics-web-monitoring-prometheus",
    "downloads": 130,
    "revisionId": 3125,
    "revision": 3,
    "name": "App Metrics - Web Monitoring - Prometheus",
    "description": "Dashboard to visualize metrics captured by App Metrics ASP.NET Core Middleware 1.2.0, tested with App.Metrics.Formatters.Prometheus 1.1.0  - http://app-metrics.io/",
    "readme": "This dashboard is to be used with App Metrics Prometheus reporting, App Metrics is an open-source and cross-platform .NET library used to record metrics within an application. More specifically it is for use with the default metrics captured by App Metric's ASP.NET Core Middleware. See the documentation for more details http://app-metrics.io/reporting/prometheus.html and the main github repo - https://github.com/alhardy/AppMetrics.",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-05-08T11:55:24.000Z",
    "updatedAt": "2017-05-30T23:52:42.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/2204"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/2204/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/2204/revisions/3"
      },
      {
        "rel": "download",
        "href": "/dashboards/2204/revisions/3/download"
      },
      {
        "rel": "org",
        "href": "/orgs/allanhardy"
      },
      {
        "rel": "images",
        "href": "/dashboards/2204/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/2204/thumbnails"
      }
    ]
  },
  {
    "id": 1666,
    "status": 1,
    "orgId": 22977,
    "orgSlug": "cristicalin",
    "orgName": "Cristian Calin",
    "slug": "bind-dns",
    "downloads": 199,
    "revisionId": 2224,
    "revision": 1,
    "name": "Bind DNS",
    "description": "Bind DNS Service Statistics.\r\n",
    "readme": "This dashboard is designed to display metrics collected by prometheus from the bind_exporter (ISC BIND DNS server).\r\nThe bind_exporter is created by DigitalOcean and hosted on [github](https://github.com/digitalocean/bind_exporter).\r\n\r\nRequired configuration in  /etc/bind/named.conf.options:\r\n\r\n```\r\nstatistics-channels {\r\n  inet 127.0.0.1 port 8053 allow { 127.0.0.1; };\r\n};\r\n```\r\n\r\nYou need to start the collector with access to the bind(named) pid file and enable the view stats group:\r\n```\r\n/usr/local/bin/bind_exporter -bind.pid-file /var/run/named/named.pid -bind.stats-groups \"server,view,tasks\"\r\n```",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-03-10T12:05:37.000Z",
    "updatedAt": "2017-03-10T12:14:31.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/1666"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/1666/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/1666/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/1666/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/cristicalin"
      },
      {
        "rel": "images",
        "href": "/dashboards/1666/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/1666/thumbnails"
      }
    ]
  },
  {
    "id": 1573,
    "status": 1,
    "orgId": 46801,
    "orgSlug": "jperville",
    "orgName": "jperville",
    "slug": "platform-backups",
    "downloads": 33,
    "revisionId": 2995,
    "revision": 2,
    "name": "Borg backups",
    "description": "Simple dashboard for https://github.com/teemow/prometheus-borg-exporter",
    "readme": "You will need the Prometheus exporter plugin for borg backup to run this dashboard :\r\n\r\nYou'll find more informations [there](https://github.com/teemow/prometheus-borg-exporter)\r\n",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-02-23T09:43:35.000Z",
    "updatedAt": "2017-05-17T14:17:00.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/1573"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/1573/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/1573/revisions/2"
      },
      {
        "rel": "download",
        "href": "/dashboards/1573/revisions/2/download"
      },
      {
        "rel": "org",
        "href": "/orgs/jperville"
      },
      {
        "rel": "images",
        "href": "/dashboards/1573/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/1573/thumbnails"
      }
    ]
  },
  {
    "id": 371,
    "status": 1,
    "orgId": 15805,
    "orgSlug": "kaija",
    "orgName": "kaija",
    "slug": "cassandra-detail",
    "downloads": 1117,
    "revisionId": 506,
    "revision": 1,
    "name": "Cassandra detail",
    "description": "Display cassandra node detail in OS, Cassandra and JVM blocks",
    "readme": "Display detail information about cassandra node with OS metrics (cpu / memory / disk / network)\r\nCassandra metrics\r\nJVM metrics",
    "collectorType": null,
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-08-29T08:08:29.000Z",
    "updatedAt": "2016-08-29T08:14:53.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/371"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/371/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/371/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/371/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/kaija"
      },
      {
        "rel": "images",
        "href": "/dashboards/371/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/371/thumbnails"
      }
    ]
  },
  {
    "id": 917,
    "status": 1,
    "orgId": 22977,
    "orgSlug": "cristicalin",
    "orgName": "Cristian Calin",
    "slug": "ceph-cluster",
    "downloads": 724,
    "revisionId": 1328,
    "revision": 1,
    "name": "Ceph - Cluster",
    "description": "Ceph Cluster overview.\r\n",
    "readme": "This requires deploying the [link](https://github.com/digitalocean/ceph_exporter \"DigitalOcean ceph_exporter\")\r\n\r\nExample job configuration:\r\n```\r\n  - job_name: 'ceph-exporter'\r\n    static_configs:\r\n      - targets: ['172.17.0.1:9128']\r\n        labels:\r\n          alias: ceph-exporter\r\n```",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-11-21T16:04:22.000Z",
    "updatedAt": "2016-11-21T16:17:43.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/917"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/917/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/917/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/917/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/cristicalin"
      },
      {
        "rel": "images",
        "href": "/dashboards/917/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/917/thumbnails"
      }
    ]
  },
  {
    "id": 1668,
    "status": 1,
    "orgId": 48987,
    "orgSlug": "sheesh",
    "orgName": "sheesh",
    "slug": "ceph-cluster",
    "downloads": 85,
    "revisionId": 2235,
    "revision": 1,
    "name": "Ceph - Cluster",
    "description": "Ceph Cluster overview.\r\n",
    "readme": "",
    "collectorType": null,
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-03-13T10:05:43.000Z",
    "updatedAt": "2017-03-13T10:06:18.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/1668"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/1668/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/1668/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/1668/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/sheesh"
      },
      {
        "rel": "images",
        "href": "/dashboards/1668/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/1668/thumbnails"
      }
    ]
  },
  {
    "id": 923,
    "status": 1,
    "orgId": 22977,
    "orgSlug": "cristicalin",
    "orgName": "Cristian Calin",
    "slug": "ceph-osd",
    "downloads": 233,
    "revisionId": 1331,
    "revision": 1,
    "name": "Ceph - OSD",
    "description": "CEPH OSD Status.",
    "readme": "This requires deploying the [link](https://github.com/digitalocean/ceph_exporter \"DigitalOcean ceph_exporter\")\r\n\r\nExample job configuration:\r\n```\r\n  - job_name: 'ceph-exporter'\r\n    static_configs:\r\n      - targets: ['172.17.0.1:9128']\r\n        labels:\r\n          alias: ceph-exporter\r\n```",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-11-21T16:08:14.000Z",
    "updatedAt": "2016-11-21T16:17:16.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/923"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/923/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/923/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/923/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/cristicalin"
      },
      {
        "rel": "images",
        "href": "/dashboards/923/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/923/thumbnails"
      }
    ]
  },
  {
    "id": 926,
    "status": 1,
    "orgId": 22977,
    "orgSlug": "cristicalin",
    "orgName": "Cristian Calin",
    "slug": "ceph-pools",
    "downloads": 194,
    "revisionId": 1334,
    "revision": 1,
    "name": "Ceph - Pools",
    "description": "Ceph Pools dashboard.",
    "readme": "This requires deploying the [link](https://github.com/digitalocean/ceph_exporter \"DigitalOcean ceph_exporter\")\r\n\r\nExample job configuration:\r\n```\r\n  - job_name: 'ceph-exporter'\r\n    static_configs:\r\n      - targets: ['172.17.0.1:9128']\r\n        labels:\r\n          alias: ceph-exporter\r\n```",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-11-21T16:10:44.000Z",
    "updatedAt": "2016-11-21T16:16:28.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/926"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/926/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/926/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/926/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/cristicalin"
      },
      {
        "rel": "images",
        "href": "/dashboards/926/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/926/thumbnails"
      }
    ]
  },
  {
    "id": 882,
    "status": 1,
    "orgId": 32127,
    "orgSlug": "f1yegor",
    "orgName": "f1yegor",
    "slug": "clickhouse",
    "downloads": 115,
    "revisionId": 1272,
    "revision": 1,
    "name": "Clickhouse",
    "description": "Clickhouse metrics",
    "readme": "Used exporter https://github.com/f1yegor/clickhouse_exporter",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-11-17T21:05:07.000Z",
    "updatedAt": "2016-11-17T21:24:31.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/882"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/882/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/882/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/882/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/f1yegor"
      },
      {
        "rel": "images",
        "href": "/dashboards/882/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/882/thumbnails"
      }
    ]
  },
  {
    "id": 869,
    "status": 1,
    "orgId": 28508,
    "orgSlug": "hagen",
    "orgName": "hagen",
    "slug": "clickhouse-overview",
    "downloads": 119,
    "revisionId": 1259,
    "revision": 1,
    "name": "ClickHouse overview",
    "description": "ClickHouse Database dashboard based on Prometheus",
    "readme": "ClickHouse is a modern and free analytic DBMS for big data. ClickHouse manages extremely large volumes of data in a stable and sustainable manner. It currently powers Yandex.Metrica, world’s second largest web analytics platform, with over 13 trillion database records and over 20 billion events a day, generating customized reports on-the-fly, directly from non-aggregated data.\r\nIt is available at https://clickhouse.yandex/\r\n\r\nDashboard allow to monitor:\r\n- total qps based on query execution\r\n- cache hits/miss rate graph\r\n- number of active connections\r\n- bytes merged/allocated rate\r\n\r\n\r\nThe author assumes that the metrics are scraped from various hosts and databases. That's why there are placed two templates: $host and $db. Remember to adjust templates for your needs at \"/dashboard/db/<your-dashboard>?editview=templating\". Graphs would change accordingly to selected value.\r\n\r\nMetrics based on system ClickHouse tables: events and metrics.\r\n\r\nRequirements: Dashboard is based on the https://github.com/roistat/go-clickhouse metrics",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-11-17T09:06:39.000Z",
    "updatedAt": "2016-11-17T09:22:22.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/869"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/869/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/869/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/869/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/hagen"
      },
      {
        "rel": "images",
        "href": "/dashboards/869/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/869/thumbnails"
      }
    ]
  },
  {
    "id": 2351,
    "status": 1,
    "orgId": 63782,
    "orgSlug": "wdijkerman",
    "orgName": "wdijkerman",
    "slug": "consul",
    "downloads": 56,
    "revisionId": 3089,
    "revision": 1,
    "name": "Consul",
    "description": "Get performance metrics from Consul",
    "readme": "This is a dashboard that provides performance data specific to a Consul Server (When using a dropdown menu that shows all available Consul Servers) or some metrics specific for the Consul Leader.\r\n\r\nThis Dashboard make use of the statsd-exporter and using a specific statsd mapper file. This file can be found here: https://gist.github.com/dj-wasabi/d9b31c4b74e561c72512f4edbdfe6927\r\n\r\nIt provides some of the following:\r\n\r\n* Hostname of the Consul Leader\r\n* How many Consul Servers are active\r\n* Some information like CPU Idle and load (Required the node-exporter)\r\n* Metrics like data written to disk and to other Consul Servers\r\n* Metrics like tcp/udp messages from/to Consul\r\n\r\n\r\nThis is just a start, so not all covered and there might be better or other ways to achieve something. Please let me know if and how things can be improved.",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-05-27T12:47:02.000Z",
    "updatedAt": "2017-05-28T12:37:00.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/2351"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/2351/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/2351/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/2351/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/wdijkerman"
      },
      {
        "rel": "images",
        "href": "/dashboards/2351/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/2351/thumbnails"
      }
    ]
  },
  {
    "id": 893,
    "status": 1,
    "orgId": 35996,
    "orgSlug": "moifort",
    "orgName": "Thibaut Mottet",
    "slug": "main",
    "downloads": 2287,
    "revisionId": 1471,
    "revision": 5,
    "name": "Docker and system monitoring",
    "description": "A simple overview of the most important Docker host and container metrics. (cAdvisor/Prometheus)",
    "readme": "# Docker + System dashboard\r\n\r\nDashboard compatible with Grafana 4\r\n\r\n## System metric\r\nThis dashboard display Docker and system metric, the aim it's to have all the metric on one dashboard. The first lines represents the system metric with gauge and text/graph (easy to visualize and minimalist). \r\n* Time up\r\n* Memory usage/swap\r\n* Disk usage\r\n* Load\r\n* Network\r\n* CPU usage\r\n* Disk I/O\r\n\r\nAlerts are set on disk usage, memory usage and load usage to warn when the metric are critics.\r\n\r\n## Docker metric\r\nThe second parts of the dashboard is Docker metric, more detailed using mostly graph.\r\n* CPU usage per container\r\n* Sent network per container\r\n* Received network per container\r\n* Memory usage/swap per container\r\n* Remaining memory for each container (if men_limit defined in docker-compose.yml)\r\n\r\n## Server configuration\r\nI use the docker-compose to set my monitoring: https://github.com/vegasbrianc/prometheus. My dashboard work with this configuration.\r\nService running:\r\n* docker\r\n* prometheus\r\n* node-exporter\r\n* alertmanager\r\n* cadvisor\r\n* grafana v4\r\n\r\n",
    "collectorType": "nodeExporter",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-11-20T02:08:15.000Z",
    "updatedAt": "2016-12-02T07:37:22.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/893"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/893/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/893/revisions/5"
      },
      {
        "rel": "download",
        "href": "/dashboards/893/revisions/5/download"
      },
      {
        "rel": "org",
        "href": "/orgs/moifort"
      },
      {
        "rel": "images",
        "href": "/dashboards/893/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/893/thumbnails"
      }
    ]
  },
  {
    "id": 179,
    "status": 1,
    "orgId": 22958,
    "orgSlug": "idomyowntricks",
    "orgName": "Brian Christner",
    "slug": "docker-dashboard",
    "downloads": 4155,
    "revisionId": 492,
    "revision": 5,
    "name": "Docker Dashboard",
    "description": "Docker Monitoring Template",
    "readme": "As part of the [Docker Monitoring project](https://github.com/vegasbrianc/prometheus/tree/version-2) The updated docker-compose file uses the latest versions of Prometheus, Grafana, cAdvisor and Node Exporter. In this process, I also re-worked the dashboard that was from a very early Grafana/ Prometheus versions to more recent. \r\n\r\nThe dashboard is based off of the [Kubernetes Dashboard](https://grafana.net/dashboards/162) but has been updated to work with Docker directly.\r\n\r\nIf your have any suggestions or would like to contribute please visit - [https://github.com/vegasbrianc/grafana_dashboard](https://github.com/vegasbrianc/grafana_dashboard)\r\n\r\nCheers,\r\n\r\nBrian Christner",
    "collectorType": "nodeExporter",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-07-14T11:06:31.000Z",
    "updatedAt": "2017-06-20T07:34:39.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/179"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/179/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/179/revisions/5"
      },
      {
        "rel": "download",
        "href": "/dashboards/179/revisions/5/download"
      },
      {
        "rel": "org",
        "href": "/orgs/idomyowntricks"
      },
      {
        "rel": "images",
        "href": "/dashboards/179/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/179/thumbnails"
      }
    ]
  },
  {
    "id": 1229,
    "status": 1,
    "orgId": 24773,
    "orgSlug": "basi",
    "orgName": "Basilio Vera",
    "slug": "docker-engine-metrics",
    "downloads": 385,
    "revisionId": 3457,
    "revision": 3,
    "name": "Docker Engine Metrics",
    "description": "Draw some docker metrics",
    "readme": "This dashboard provides graphs about some metrics provided by the docker daemon.\r\n\r\nIn docker 1.13 you need to activate explictly the metrics endpoint adding this parameter to the daemon: `metrics-addr=0.0.0.0:4999` and activate the experimental features.\r\n\r\nMore about how to use this dashboard [here](https://medium.com/@basilio.vera/docker-swarm-metrics-in-prometheus-e02a6a5745a#.6nzvnljvm)",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-12-27T16:15:47.000Z",
    "updatedAt": "2017-07-03T15:34:04.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/1229"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/1229/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/1229/revisions/3"
      },
      {
        "rel": "download",
        "href": "/dashboards/1229/revisions/3/download"
      },
      {
        "rel": "org",
        "href": "/orgs/basi"
      },
      {
        "rel": "images",
        "href": "/dashboards/1229/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/1229/thumbnails"
      }
    ]
  },
  {
    "id": 395,
    "status": 1,
    "orgId": 24649,
    "orgSlug": "uschtwill",
    "orgName": "uschtwill",
    "slug": "main-overview",
    "downloads": 1690,
    "revisionId": 536,
    "revision": 1,
    "name": "Docker Host & Container Overview",
    "description": "A simple overview of the most important Docker host and container metrics. (cAdvisor/Prometheus)",
    "readme": "The (simplified) dashboard used in this Monitoring/Logging/Alerting Suite: [https://github.com/uschtwill/docker_monitoring_logging](https://github.com/uschtwill/docker_monitoring_logging)\r\n\r\nThe screenshot should be pretty self-explanatory.  Includes templating for container groups. The original (from the Github repository above) also draws annotations into the graphs by pulling user-defined log events and Prometheus alerts from an Elasticsearch (second screenshot).\r\n\r\n__Description from the Github repo:__\r\n* This is an out of the box monitoring, logging and alerting suite for Docker-hosts and their containers, complete with dashboards to monitor and explore your host and container logs and metrics.\r\n* Monitoring: cAdvisor and node_exporter for collection, Prometheus for storage, Grafana for visualisation.\r\n* Logging: Filebeat for collection and log-collection and forwarding, Logstash for aggregation and processing, Elasticsearch as datastore/backend and Kibana as the frontend.\r\n* Alerting: elastalert as a drop-in for Elastic.io's Watcher for alerts triggered by certain container or host log events and Prometheus' Alertmanager for alerts regarding metrics.",
    "collectorType": "nodeExporter",
    "collectorConfig": "Uses nodeExporter and cAdvisor as collectors. See Github repository for details regarding setup and configuration.",
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-09-07T09:31:11.000Z",
    "updatedAt": "2016-09-15T10:16:31.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/395"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/395/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/395/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/395/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/uschtwill"
      },
      {
        "rel": "images",
        "href": "/dashboards/395/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/395/thumbnails"
      }
    ]
  },
  {
    "id": 784,
    "status": 1,
    "orgId": 22958,
    "orgSlug": "idomyowntricks",
    "orgName": "Brian Christner",
    "slug": "docker-hub-stats",
    "downloads": 119,
    "revisionId": 1090,
    "revision": 1,
    "name": "Docker Hub Stats",
    "description": "Docker Hub image metrics",
    "readme": "This dashboard is used to track Docker Hub metrics for selected images. Blog post coming soon for more info.",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-10-31T13:59:34.000Z",
    "updatedAt": "2016-10-31T14:01:57.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/784"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/784/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/784/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/784/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/idomyowntricks"
      },
      {
        "rel": "images",
        "href": "/dashboards/784/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/784/thumbnails"
      }
    ]
  },
  {
    "id": 193,
    "status": 1,
    "orgId": 22966,
    "orgSlug": "philicious",
    "orgName": "philicious",
    "slug": "docker-monitoring",
    "downloads": 1820,
    "revisionId": 244,
    "revision": 1,
    "name": "Docker monitoring",
    "description": "Docker monitoring with Prometheus and cAdvisor",
    "readme": "This is a dashboard for monitoring Docker container metrics collected by cAdvisor and stored in Prometheus TSDB.\r\n\r\nIts an alternative for [Brians Docker dashboard](https://grafana.net/dashboards/179) with some variations and not based on the Kubernetes Dashboard.\r\n\r\nFor monitoring the host system, I suggest using [node-exporter dashboard](https://grafana.net/dashboards/22) along this one.\r\n\r\nIf you have any suggestions or want to contribute, check [https://github.com/philicious/grafana-dashboards](https://github.com/philicious/grafana-dashboards)",
    "collectorType": "nodeExporter",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-07-14T21:30:30.000Z",
    "updatedAt": "2017-02-17T15:06:00.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/193"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/193/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/193/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/193/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/philicious"
      },
      {
        "rel": "images",
        "href": "/dashboards/193/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/193/thumbnails"
      }
    ]
  },
  {
    "id": 609,
    "status": 1,
    "orgId": 24773,
    "orgSlug": "basi",
    "orgName": "Basilio Vera",
    "slug": "docker-swarm-container-overview",
    "downloads": 1709,
    "revisionId": 2513,
    "revision": 22,
    "name": "Docker Swarm & Container Overview",
    "description": "Overview of the most important Docker swarm and container metrics. (cAdvisor/NodeExporter/Prometheus)",
    "readme": "It modifies a little bit the original dashboard to adapt the graphs to fit better with a Docker swarm cluster which is running cAdvisor and Node Exporter on each node.\r\n\r\nTo use it you need:\r\n\r\n- A Docker swarm mode cluster.\r\n- Launch some services. Swarm will automatically propagate some labels that are used by the dashboard.\r\n- If you don't launch the services using the \"docker stack deploy XXX\" command there's another label that you'll need to launch per service (--container-label com.docker.stack.namespace=XXX) to identify those services by its intended usage.\r\n- You'll need to launch cAdvisor and node-exporter as global service in the cluster, and use the same network for them and the Prometheus instance.\r\n- Node exporter can export extra metrics, in this case I found useful to export the hostname, to allow the node metrics to be split by it. An example of this can be found in the repo: https://github.com/bvis/docker-node-exporter\r\n- Prometheus needs to be launched with the auto-discovery configuration based on DNS.\r\n- It uses Elasticsearch to search errors in the logs generated by logstash\r\n- It uses Elasticsearch, in another index, to check for alerts fired and resolved\r\n- It assumes that in your cluster you are using a proxy for public traffic. You can decide from your services list which one is your proxy. I find useful to have split the traffic of this service, because it basically can distort the traffic metrics.\r\nThis configuration should work:\r\n```\r\nglobal:\r\n  scrape_interval:     30s\r\n  evaluation_interval: 30s\r\n\r\n  labels:\r\n      cluster: swarm\r\n      replica: \"1\"\r\n\r\nscrape_configs:\r\n  - job_name: 'cadvisor'\r\n    dns_sd_configs:\r\n    - names:\r\n      - 'tasks.cadvisor'\r\n      type: 'A'\r\n      port: 8080\r\n\r\n  - job_name: 'node-exporter'\r\n    dns_sd_configs:\r\n    - names:\r\n      - 'tasks.node-exporter'\r\n      type: 'A'\r\n      port: 9100\r\n```  \r\n\r\nBased on Docker Host & Container Overviewby by uschtwill (https://grafana.net/dashboards/395).\r\n\r\nIf you are interested on deploy the full monitoring stack you can use the next commands:\r\n\r\n```\r\ndocker \\\r\n  network create --driver overlay monitoring\r\n\r\ndocker \\\r\n  service create --name cadvisor \\\r\n  --mode global \\\r\n  --network monitoring \\\r\n  --label com.docker.stack.namespace=monitoring \\  \r\n  --container-label com.docker.stack.namespace=monitoring \\\r\n  --mount type=bind,src=/,dst=/rootfs:ro \\\r\n  --mount type=bind,src=/var/run,dst=/var/run:rw \\\r\n  --mount type=bind,src=/sys,dst=/sys:ro \\\r\n  --mount type=bind,src=/var/lib/docker/,dst=/var/lib/docker:ro \\\r\n  google/cadvisor:v0.24.1\r\n\r\ndocker \\\r\n  service create --name node-exporter \\\r\n  --mode global \\\r\n  --network monitoring \\\r\n  --label com.docker.stack.namespace=monitoring \\\r\n  --container-label com.docker.stack.namespace=monitoring \\\r\n  --mount type=bind,source=/proc,target=/host/proc \\\r\n  --mount type=bind,source=/sys,target=/host/sys \\\r\n  --mount type=bind,source=/,target=/rootfs \\\r\n  --mount type=bind,source=/etc/hostname,target=/etc/host_hostname \\\r\n  -e HOST_HOSTNAME=/etc/host_hostname \\\r\n  basi/node-exporter:v0.1.1 \\\r\n  -collector.procfs /host/proc \\\r\n  -collector.sysfs /host/sys \\\r\n  -collector.filesystem.ignored-mount-points \"^/(sys|proc|dev|host|etc)($|/)\" \\\r\n  --collector.textfile.directory /etc/node-exporter/ \\\r\n  --collectors.enabled=\"conntrack,diskstats,entropy,filefd,filesystem,loadavg,mdadm,meminfo,netdev,netstat,stat,textfile,time,vmstat,ipvs\"\r\n\r\ndocker \\\r\n  service create --name alertmanager \\\r\n  --network monitoring \\\r\n  --label com.docker.stack.namespace=monitoring \\\r\n  --container-label com.docker.stack.namespace=monitoring \\\r\n  --publish 9093:9093 \\\r\n  -e \"SLACK_API=https://hooks.slack.com/services/TOKEN-HERE\" \\\r\n  -e \"LOGSTASH_URL=http://logstash:8080/\" \\\r\n  basi/alertmanager:v0.1.0 \\\r\n    -config.file=/etc/alertmanager/config.yml\r\n\r\ndocker \\\r\n  service create \\\r\n  --name prometheus \\\r\n  --network monitoring \\\r\n  --label com.docker.stack.namespace=monitoring \\\r\n  --container-label com.docker.stack.namespace=monitoring \\\r\n  --publish 9090:9090 \\\r\n  basi/prometheus-swarm:v0.3.1 \\\r\n    -config.file=/etc/prometheus/prometheus.yml \\\r\n    -storage.local.path=/prometheus \\\r\n    -web.console.libraries=/etc/prometheus/console_libraries \\\r\n    -web.console.templates=/etc/prometheus/consoles \\\r\n    -alertmanager.url=http://alertmanager:9093\r\n\r\ndocker \\\r\n  service create \\\r\n  --name grafana \\\r\n  --network monitoring \\\r\n  --label com.docker.stack.namespace=monitoring \\\r\n  --container-label com.docker.stack.namespace=monitoring \\\r\n  --publish 3000:3000 \\\r\n  -e \"GF_SERVER_ROOT_URL=http://grafana.${CLUSTER_DOMAIN}\" \\\r\n  -e \"GF_SECURITY_ADMIN_PASSWORD=$GF_PASSWORD\" \\\r\n  -e \"PROMETHEUS_ENDPOINT=http://prometheus:9090\" \\\r\n  -e \"ELASTICSEARCH_ENDPOINT=$ES_ADDRESS\" \\\r\n  -e \"ELASTICSEARCH_USER=$ES_USERNAME\" \\\r\n  -e \"ELASTICSEARCH_PASSWORD=$ES_PASSWORD\" \\\r\n  basi/grafana:v4.1.1\r\n```\r\nIn this example there are some components missing, like the logstash processor for the alerts and the elasticseach who's responsible to store the alerts sent by the logstash or the error logs.\r\n\r\nMore info about the usage of this dashboard can be found in [this repo](https://github.com/bvis/docker-prometheus-swarm)\r\n\r\nIf you liked it, you may [buy me a coffee](https://ko-fi.com/A214GTV).",
    "collectorType": "nodeExporter",
    "collectorConfig": "",
    "collectorPluginList": null,
    "datasource": "Elasticsearch, Prometheus",
    "privacy": "public",
    "createdAt": "2016-10-11T00:50:06.000Z",
    "updatedAt": "2017-04-05T23:27:00.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/609"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/609/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/609/revisions/22"
      },
      {
        "rel": "download",
        "href": "/dashboards/609/revisions/22/download"
      },
      {
        "rel": "org",
        "href": "/orgs/basi"
      },
      {
        "rel": "images",
        "href": "/dashboards/609/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/609/thumbnails"
      }
    ]
  },
  {
    "id": 1505,
    "status": 1,
    "orgId": 42524,
    "orgSlug": "ekambarampasham",
    "orgName": "ekambarampasham",
    "slug": "docker-swarm-monitor-v2",
    "downloads": 170,
    "revisionId": 2021,
    "revision": 2,
    "name": "Docker-Swarm-Monitor-v2",
    "description": "Docker Swarm Monitor Dashboad v2.0",
    "readme": "1. cAdvisor is used to collect container metrics\r\n2. Node Exporter is used to collect node/host metrics\r\n3. Prometheus scrapes metrics from cAdvisor and Node Exporter \r\n4. Grafana retrieves the metric data form Prometheus and displays them as nicely looking graphs",
    "collectorType": "nodeExporter",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-02-15T13:21:45.000Z",
    "updatedAt": "2017-02-16T14:41:12.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/1505"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/1505/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/1505/revisions/2"
      },
      {
        "rel": "download",
        "href": "/dashboards/1505/revisions/2/download"
      },
      {
        "rel": "org",
        "href": "/orgs/ekambarampasham"
      },
      {
        "rel": "images",
        "href": "/dashboards/1505/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/1505/thumbnails"
      }
    ]
  },
  {
    "id": 768,
    "status": 1,
    "orgId": 33672,
    "orgSlug": "clawsicus",
    "orgName": "clawsicus",
    "slug": "dump1090",
    "downloads": 61,
    "revisionId": 1085,
    "revision": 3,
    "name": "dump1090",
    "description": "This dashboard displays dump1090 metrics that get exposed to Prometheus by the dump1090exporter.",
    "readme": "dump1090exporter\r\n================\r\n\r\n[Dump1090](https://github.com/MalcolmRobb/dump1090) is a simple Mode S decoder for RTLSDR devices that is commonly used for tracking aircraft. It exposes a number of different operating metrics to track the performance of the tool and its environment.\r\n\r\nThe [dump1090exporter](https://github.com/claws/dump1090-exporter) collects statistics from dump1090 and exposes it to the [Prometheus.io](https://prometheus.io/) monitoring server for aggregation and later visualisation.\r\n\r\nThis dashboard displays some of the dump190 metrics that get exposed to Prometheus by the dump1090exporter tool. ",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-10-28T23:03:29.000Z",
    "updatedAt": "2016-10-30T21:16:22.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/768"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/768/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/768/revisions/3"
      },
      {
        "rel": "download",
        "href": "/dashboards/768/revisions/3/download"
      },
      {
        "rel": "org",
        "href": "/orgs/clawsicus"
      },
      {
        "rel": "images",
        "href": "/dashboards/768/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/768/thumbnails"
      }
    ]
  },
  {
    "id": 266,
    "status": 1,
    "orgId": 24863,
    "orgSlug": "vvanholl",
    "orgName": "vvanholl",
    "slug": "elasticsearch",
    "downloads": 1404,
    "revisionId": 493,
    "revision": 3,
    "name": "ElasticSearch",
    "description": "",
    "readme": "You will need the Prometheus exporter plugin for ElasticSearch to run this dashboard :\r\n\r\nYou'll find more informations [there](https://github.com/vvanholl/elasticsearch-prometheus-exporter)",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-08-02T21:17:32.000Z",
    "updatedAt": "2016-08-25T18:56:30.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/266"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/266/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/266/revisions/3"
      },
      {
        "rel": "download",
        "href": "/dashboards/266/revisions/3/download"
      },
      {
        "rel": "org",
        "href": "/orgs/vvanholl"
      },
      {
        "rel": "images",
        "href": "/dashboards/266/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/266/thumbnails"
      }
    ]
  },
  {
    "id": 2322,
    "status": 1,
    "orgId": 63114,
    "orgSlug": "infinity",
    "orgName": "infinity",
    "slug": "elasticsearch",
    "downloads": 61,
    "revisionId": 3447,
    "revision": 3,
    "name": "ElasticSearch",
    "description": "ElasticSearch metrics",
    "readme": "#### You will need the Prometheus exporter plugin for ElasticSearch ( https://github.com/justwatchcom/elasticsearch_exporter ) to run this dashboard\r\n\r\n### HOW TO make elasticsearch_exporter on centos-7:\r\n```sh\r\nyum  -y install golang\r\nGOPATH=/usr/local go get -u github.com/justwatchcom/elasticsearch_exporter\r\n```\r\n### RUN:\r\n```sh\r\ncat << EOF > /etc/systemd/system/elasticsearch_exporter.service\r\n[Unit]\r\nDescription=Prometheus elasticsearch_exporter\r\nAfter=local-fs.target network-online.target network.target\r\nWants=local-fs.target network-online.target network.target\r\n\r\n[Service]\r\nUser=root\r\nNice=10\r\nExecStart = /usr/local/bin/elasticsearch_exporter \r\nExecStop= /usr/bin/killall elasticsearch_exporter\r\n\r\n[Install]\r\nWantedBy=default.target\r\nEOF\r\n\r\nsystemctl daemon-reload\r\nsystemctl enable elasticsearch_exporter.service\r\nsystemctl start  elasticsearch_exporter.service\r\n```\r\n\r\n### Exampe config for prometheus.yml:\r\n```sh\r\n  - job_name: elasticsearch\r\n    scrape_interval: 30s\r\n    metrics_path: \"/metrics\"\r\n    static_configs:\r\n    - targets:\r\n      - graylog.prod.lan:9108\r\n      - elastic1.test.lan:9108\r\n      - elastic2.test.lan:9108\r\n      - elastic3.test.lan:9108\r\n      - elastic1.prod.lan:9108\r\n      - elastic2.prod.lan:9108\r\n      - elastic3.prod.lan:9108\r\n      labels:\r\n        service: elasticsearch\r\n    relabel_configs:\r\n    - source_labels: [__address__]\r\n      regex: '(.*)\\:9108'\r\n      target_label:  'instance'\r\n      replacement:   '$1'\r\n    - source_labels: [__address__]\r\n      regex:         '.*\\.(.*)\\.lan.*'\r\n      target_label:  'environment'\r\n      replacement:   '$1'\r\n```\r\n### Exampe config for  prometheus alerts.rules:\r\n```sh\r\nALERT Elastic_UP\r\n  IF elasticsearch_up{job=\"elasticsearch\"} != 1\r\n  FOR 10s\r\n  LABELS { severity=\"alert\", value = \"{{$value}}\" }\r\n  ANNOTATIONS {\r\n    summary = \"Instance {{ $labels.instance }}: Elasticsearch instance status is not 1\",\r\n    description = \"This server's Elasticsearch instance status has a value of {{ $value }}.\",\r\n  }\r\n\r\nALERT Elastic_Cluster_Health\r\n  IF elasticsearch_cluster_health_status_is_green{job=\"elasticsearch\"} != 1\r\n  FOR 10s\r\n  LABELS { severity=\"alert\", value = \"{{$value}}\" }\r\n  ANNOTATIONS {\r\n    summary = \"Instance {{ $labels.instance }}: not all primary and replica shards are allocated in elasticsearch cluster\",\r\n    description = \"Instance {{ $labels.instance }}: not all primary and replica shards are allocated in elasticsearch cluster, cluster health has a value of {{ $value }}.\",\r\n  }\r\n\r\nALERT Elasticsearch_JVM_Heap_Too_High\r\n IF elasticsearch_jvm_memory_used_bytes{area=\"heap\"} / elasticsearch_jvm_memory_max_bytes{area=\"heap\"} > 0.9\r\n FOR 15m\r\n LABELS { severity=\"alert\", value = \"{{$value}}\" }\r\n ANNOTATIONS {\r\n    summary = \"ElasticSearch node {{ $labels.instance }} heap usage is high\",\r\n    description = \"The heap in {{ $labels.instance }} is over 90% for 15m.\",\r\n  }\r\n\r\n```",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-05-24T09:15:13.000Z",
    "updatedAt": "2017-06-29T10:16:17.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/2322"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/2322/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/2322/revisions/3"
      },
      {
        "rel": "download",
        "href": "/dashboards/2322/revisions/3/download"
      },
      {
        "rel": "org",
        "href": "/orgs/infinity"
      },
      {
        "rel": "images",
        "href": "/dashboards/2322/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/2322/thumbnails"
      }
    ]
  },
  {
    "id": 2347,
    "status": 1,
    "orgId": 63475,
    "orgSlug": "yakushev",
    "orgName": "yakushev",
    "slug": "elasticsearch-stats",
    "downloads": 24,
    "revisionId": 3336,
    "revision": 2,
    "name": "Elasticsearch Stats",
    "description": "ElasticSearch metrics from prometheus exporter",
    "readme": "ElasticSearch metrics from prometheus exporter (https://github.com/justwatchcom/elasticsearch_exporter)\r\n\r\nFork from: https://grafana.com/dashboards/266\r\n\r\ngit: https://github.com/yackushevas/grafana_dashboards\r\n\r\nrev2:\r\nUpdate for compatibility with 0.3.3 elasticsearch_exporter: https://github.com/justwatchcom/elasticsearch_exporter/releases/tag/v0.3.3\r\nAdded labels for dividing nodes by type: https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-node.html\r\nfor example:\r\n```\r\n- job_name: 'elasticsearch'\r\n\r\n  scrape_interval: 30s\r\n  metrics_path: '/metrics'\r\n  static_configs:\r\n    - targets: [ 'master1']\r\n      # Labels assigned to all metrics scraped from the targets.\r\n      labels:\r\n        node_type: data\r\n    - targets: [ 'storage1' ]\r\n      # Labels assigned to all metrics scraped from the targets.\r\n      labels:\r\n        node_type: master\r\n    - targets: [ 'client1' ]\r\n      # Labels assigned to all metrics scraped from the targets.\r\n      labels:\r\n        node_type: client\"\r\n```\r\n\r\n",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-05-26T18:57:17.000Z",
    "updatedAt": "2017-06-16T20:04:28.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/2347"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/2347/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/2347/revisions/2"
      },
      {
        "rel": "download",
        "href": "/dashboards/2347/revisions/2/download"
      },
      {
        "rel": "org",
        "href": "/orgs/yakushev"
      },
      {
        "rel": "images",
        "href": "/dashboards/2347/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/2347/thumbnails"
      }
    ]
  },
  {
    "id": 285,
    "status": 1,
    "orgId": 23094,
    "orgSlug": "ncabatoff",
    "orgName": "ncabatoff",
    "slug": "factorio",
    "downloads": 94,
    "revisionId": 372,
    "revision": 3,
    "name": "factorio",
    "description": "See what's happening in your Factorio game.  Learn to use Prometheus and Grafana in the process.",
    "readme": "Details of dashboard contents at https://github.com/ncabatoff/promfacto",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-08-07T16:50:15.000Z",
    "updatedAt": "2016-08-08T03:55:26.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/285"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/285/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/285/revisions/3"
      },
      {
        "rel": "download",
        "href": "/dashboards/285/revisions/3/download"
      },
      {
        "rel": "org",
        "href": "/orgs/ncabatoff"
      },
      {
        "rel": "images",
        "href": "/dashboards/285/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/285/thumbnails"
      }
    ]
  },
  {
    "id": 2500,
    "status": 1,
    "orgId": 67456,
    "orgSlug": "arman",
    "orgName": "arman",
    "slug": "falconmonitorreconstructued",
    "downloads": 9,
    "revisionId": 3367,
    "revision": 1,
    "name": "FalconMonitorPrometheus",
    "description": "A monitor for servers using prometheus",
    "readme": "",
    "collectorType": null,
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-06-20T22:59:15.000Z",
    "updatedAt": "2017-06-20T22:59:42.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/2500"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/2500/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/2500/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/2500/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/arman"
      },
      {
        "rel": "images",
        "href": "/dashboards/2500/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/2500/thumbnails"
      }
    ]
  },
  {
    "id": 1559,
    "status": 1,
    "orgId": 22958,
    "orgSlug": "idomyowntricks",
    "orgName": "Brian Christner",
    "slug": "github-stats",
    "downloads": 103,
    "revisionId": 2099,
    "revision": 2,
    "name": "GitHub Stats",
    "description": "A docker stack which uses Grafana to collect GitHub statistics for selected Repositories",
    "readme": "This dashboard is part of the [GitHub Monitoring Project](https://www.brianchristner.io/monitor-your-github-repos-with-docker/) project which utilizes Docker, Prometheus, Grafana, and the GitHub Prometheus Exporter.\r\n\r\nThe Grafana Dashboard tracks GitHub Repo Stars, Forks, and issues related to each Repo. The project is easy to update to track different Repos. The Dashboard is intented to be a starting point for your projects.\r\n\r\nHave fun!",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-02-21T12:25:41.000Z",
    "updatedAt": "2017-02-22T07:32:57.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/1559"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/1559/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/1559/revisions/2"
      },
      {
        "rel": "download",
        "href": "/dashboards/1559/revisions/2/download"
      },
      {
        "rel": "org",
        "href": "/orgs/idomyowntricks"
      },
      {
        "rel": "images",
        "href": "/dashboards/1559/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/1559/thumbnails"
      }
    ]
  },
  {
    "id": 2437,
    "status": 1,
    "orgId": 66430,
    "orgSlug": "rizala",
    "orgName": "rizala",
    "slug": "github-stats",
    "downloads": 2,
    "revisionId": 3223,
    "revision": 1,
    "name": "GitHub Stats",
    "description": "A docker stack which uses Grafana to collect GitHub statistics for selected Repositories",
    "readme": "",
    "collectorType": null,
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-06-10T21:47:11.000Z",
    "updatedAt": "2017-06-10T21:47:37.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/2437"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/2437/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/2437/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/2437/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/rizala"
      },
      {
        "rel": "images",
        "href": "/dashboards/2437/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/2437/thumbnails"
      }
    ]
  },
  {
    "id": 2341,
    "status": 1,
    "orgId": 63340,
    "orgSlug": "nikosch86",
    "orgName": "nikosch86",
    "slug": "gitlab-runner-service",
    "downloads": 20,
    "revisionId": 3091,
    "revision": 2,
    "name": "Gitlab Runner Service",
    "description": "",
    "readme": "",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-05-25T06:18:45.000Z",
    "updatedAt": "2017-05-28T04:58:30.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/2341"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/2341/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/2341/revisions/2"
      },
      {
        "rel": "download",
        "href": "/dashboards/2341/revisions/2/download"
      },
      {
        "rel": "org",
        "href": "/orgs/nikosch86"
      },
      {
        "rel": "images",
        "href": "/dashboards/2341/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/2341/thumbnails"
      }
    ]
  },
  {
    "id": 1575,
    "status": 1,
    "orgId": 46842,
    "orgSlug": "pitzzae",
    "orgName": "Guillaume Torresani",
    "slug": "gitlab-monitor",
    "downloads": 165,
    "revisionId": 2130,
    "revision": 5,
    "name": "Gitlab-Monitor",
    "description": "Monitor Gitlab: Memory, Process-Age, Sidekiq queue/Latency, Process Count",
    "readme": "Ready for gitlab-ce 8.17.0\r\n\r\nOn your Gitlab enbale gitlab-monitor (/etc/gitlab/gitlab.rb)\r\n```\r\ngitlab_monitor['enable'] = true\r\ngitlab_monitor['log_directory'] = \"/var/log/gitlab/gitlab-monitor\"\r\ngitlab_monitor['home'] = \"/var/opt/gitlab/gitlab-monitor\"\r\ngitlab_monitor['listen_address'] = ':9168'\r\n```\r\ngitlab-monitor build_in export metrics on\r\n```\r\nhttp://localhost:9168/sidekiq\r\nhttp://localhost:9168/process\r\n```\r\nAdd job_name on prometheus\r\n```\r\n  - job_name: 'gitlab-process'\r\n    scrape_interval: 5s\r\n    metrics_path: /process\r\n    static_configs:\r\n         - targets: ['localhost:9168']\r\n\r\n  - job_name: 'gitlab-sidekiq'\r\n    scrape_interval: 5s\r\n    metrics_path: /sidekiq\r\n    static_configs:\r\n         - targets: ['localhost:9168']\r\n```",
    "collectorType": null,
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-02-23T13:30:21.000Z",
    "updatedAt": "2017-02-23T15:51:23.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/1575"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/1575/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/1575/revisions/5"
      },
      {
        "rel": "download",
        "href": "/dashboards/1575/revisions/5/download"
      },
      {
        "rel": "org",
        "href": "/orgs/pitzzae"
      },
      {
        "rel": "images",
        "href": "/dashboards/1575/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/1575/thumbnails"
      }
    ]
  },
  {
    "id": 240,
    "status": 1,
    "orgId": 23094,
    "orgSlug": "ncabatoff",
    "orgName": "ncabatoff",
    "slug": "go-processes",
    "downloads": 438,
    "revisionId": 427,
    "revision": 3,
    "name": "Go Processes",
    "description": "Process status published by Go Prometheus client library, e.g. memory used, fds open, GC details",
    "readme": "I don't pretend to be an expert on the Go runtime or garbage collector.  These are just some panels that I found helpful in identifying problematic behaviour in Go programs, like file descriptor or memory leaks, or excessive garbage generation.  I publish this mostly to inspire someone more knowledgeable to create a better version. ",
    "collectorType": null,
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-07-23T22:05:26.000Z",
    "updatedAt": "2016-08-14T17:20:03.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/240"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/240/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/240/revisions/3"
      },
      {
        "rel": "download",
        "href": "/dashboards/240/revisions/3/download"
      },
      {
        "rel": "org",
        "href": "/orgs/ncabatoff"
      },
      {
        "rel": "images",
        "href": "/dashboards/240/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/240/thumbnails"
      }
    ]
  },
  {
    "id": 789,
    "status": 1,
    "orgId": 11782,
    "orgSlug": "mcth",
    "orgName": "Thomas Cheronneau",
    "slug": "haproxy",
    "downloads": 374,
    "revisionId": 1098,
    "revision": 1,
    "name": "HaProxy backend (or frontend/servers)  ",
    "description": "Show backend stats",
    "readme": "This Dashboard shows backend stats. \r\nYou can use templating to choose one/multiple backend (singlestats works only with one). \r\nYou can easily change backend to /frontend|server/ by editing query and replace backend with another one. ",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-10-31T17:18:25.000Z",
    "updatedAt": "2016-10-31T17:20:44.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/789"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/789/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/789/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/789/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/mcth"
      },
      {
        "rel": "images",
        "href": "/dashboards/789/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/789/thumbnails"
      }
    ]
  },
  {
    "id": 364,
    "status": 1,
    "orgId": 22977,
    "orgSlug": "cristicalin",
    "orgName": "Cristian Calin",
    "slug": "haproxy-backend-haproxy",
    "downloads": 203,
    "revisionId": 2227,
    "revision": 3,
    "name": "HAproxy Backend | HAproxy",
    "description": "HAproxy Backends",
    "readme": "This dashboard displays the detailed number of requests and their split by HTTP codes along aggregated throughput for the haproxy backends.\r\n\r\nIt requires that you gather haproxy metrics using the haproxy_exporter from prometheus [link](https://github.com/prometheus/haproxy_exporter \"here\")\r\n\r\nExample prometheus configuration:\r\n```\r\n  - job_name: 'loadbalancer1'\r\n    static_configs:\r\n      - targets: ['172.18.0.108:9101']\r\n        labels:\r\n          alias: loadbalancer1\r\n```\r\n\r\nYou need to have the stats option configured in your global section of haproxy.cfg, example:\r\n\r\n```\r\nglobal\r\n\tlog /dev/log\tlocal0\r\n\tlog /dev/log\tlocal1 notice\r\n\tuser haproxy\r\n\tgroup haproxy\r\n\tmaxconn  16000\r\n\tstats  socket /var/lib/haproxy/stats level admin\r\n\ttune.bufsize  32768\r\n\ttune.maxrewrite  1024\r\n\ttune.ssl.default-dh-param 2048\r\n\tdaemon\r\n```\r\nYou can start the exporter to listen on the unix socket:\r\n```\r\nhaproxy_exporter -haproxy.scrape-uri unix:/var/lib/haproxy/stats\r\n```\r\n",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-08-26T08:12:39.000Z",
    "updatedAt": "2017-03-10T12:16:56.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/364"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/364/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/364/revisions/3"
      },
      {
        "rel": "download",
        "href": "/dashboards/364/revisions/3/download"
      },
      {
        "rel": "org",
        "href": "/orgs/cristicalin"
      },
      {
        "rel": "images",
        "href": "/dashboards/364/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/364/thumbnails"
      }
    ]
  },
  {
    "id": 361,
    "status": 1,
    "orgId": 22977,
    "orgSlug": "cristicalin",
    "orgName": "Cristian Calin",
    "slug": "haproxy-frontend-haproxy",
    "downloads": 184,
    "revisionId": 2230,
    "revision": 3,
    "name": "HAproxy Frontend | HAproxy",
    "description": "HAproxy Frontends",
    "readme": "This dashboard displays the detailed number of requests and their split by HTTP codes along aggregated throughput for the haproxy frontends.\r\n\r\nIt requires that you gather haproxy metrics using the haproxy_exporter from prometheus [link](https://github.com/prometheus/haproxy_exporter \"here\")\r\n\r\nExample prometheus configuration:\r\n```\r\n  - job_name: 'loadbalancer1'\r\n    static_configs:\r\n      - targets: ['172.18.0.108:9101']\r\n        labels:\r\n          alias: loadbalancer1\r\n```\r\n\r\nYou need to have the stats option configured in your global section of haproxy.cfg, example:\r\n\r\n```\r\nglobal\r\n\tlog /dev/log\tlocal0\r\n\tlog /dev/log\tlocal1 notice\r\n\tuser haproxy\r\n\tgroup haproxy\r\n\tmaxconn  16000\r\n\tstats  socket /var/lib/haproxy/stats level admin\r\n\ttune.bufsize  32768\r\n\ttune.maxrewrite  1024\r\n\ttune.ssl.default-dh-param 2048\r\n\tdaemon\r\n```\r\nYou can start the exporter to listen on the unix socket:\r\n```\r\nhaproxy_exporter -haproxy.scrape-uri unix:/var/lib/haproxy/stats\r\n```\r\n",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-08-26T08:00:31.000Z",
    "updatedAt": "2017-03-10T12:18:01.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/361"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/361/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/361/revisions/3"
      },
      {
        "rel": "download",
        "href": "/dashboards/361/revisions/3/download"
      },
      {
        "rel": "org",
        "href": "/orgs/cristicalin"
      },
      {
        "rel": "images",
        "href": "/dashboards/361/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/361/thumbnails"
      }
    ]
  },
  {
    "id": 2428,
    "status": 1,
    "orgId": 54000,
    "orgSlug": "idealista",
    "orgName": "idealista",
    "slug": "haproxy",
    "downloads": 32,
    "revisionId": 3305,
    "revision": 2,
    "name": "HAproxy Full",
    "description": "HAproxy backend servers",
    "readme": "Nearly all values exported by Prometheus HAproxy exporter graphed.\r\n\r\nAvailable on github: https://github.com/rfrail3/grafana-dashboards.git",
    "collectorType": "nodeExporter",
    "collectorConfig": null,
    "collectorPluginList": "Other",
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-06-09T09:45:43.000Z",
    "updatedAt": "2017-06-14T08:47:58.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/2428"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/2428/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/2428/revisions/2"
      },
      {
        "rel": "download",
        "href": "/dashboards/2428/revisions/2/download"
      },
      {
        "rel": "org",
        "href": "/orgs/idealista"
      },
      {
        "rel": "images",
        "href": "/dashboards/2428/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/2428/thumbnails"
      }
    ]
  },
  {
    "id": 367,
    "status": 1,
    "orgId": 22977,
    "orgSlug": "cristicalin",
    "orgName": "Cristian Calin",
    "slug": "haproxy-servers-haproxy",
    "downloads": 717,
    "revisionId": 2233,
    "revision": 3,
    "name": "HAproxy Servers | HAproxy",
    "description": "HAproxy backend servers",
    "readme": "This dashboard displays the detailed number of responses and their split by HTTP codes along aggregated throughput for the haproxy backend servers.\r\n\r\nIt requires that you gather haproxy metrics using the haproxy_exporter from prometheus [link](https://github.com/prometheus/haproxy_exporter \"here\")\r\n\r\nExample prometheus configuration:\r\n```\r\n  - job_name: 'loadbalancer1'\r\n    static_configs:\r\n      - targets: ['172.18.0.108:9101']\r\n        labels:\r\n          alias: loadbalancer1\r\n```\r\n\r\nYou need to have the stats option configured in your global section of haproxy.cfg, example:\r\n\r\n```\r\nglobal\r\n\tlog /dev/log\tlocal0\r\n\tlog /dev/log\tlocal1 notice\r\n\tuser haproxy\r\n\tgroup haproxy\r\n\tmaxconn  16000\r\n\tstats  socket /var/lib/haproxy/stats level admin\r\n\ttune.bufsize  32768\r\n\ttune.maxrewrite  1024\r\n\ttune.ssl.default-dh-param 2048\r\n\tdaemon\r\n```\r\nYou can start the exporter to listen on the unix socket:\r\n```\r\nhaproxy_exporter -haproxy.scrape-uri unix:/var/lib/haproxy/stats\r\n```\r\n",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-08-26T08:18:36.000Z",
    "updatedAt": "2017-03-10T12:18:51.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/367"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/367/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/367/revisions/3"
      },
      {
        "rel": "download",
        "href": "/dashboards/367/revisions/3/download"
      },
      {
        "rel": "org",
        "href": "/orgs/cristicalin"
      },
      {
        "rel": "images",
        "href": "/dashboards/367/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/367/thumbnails"
      }
    ]
  },
  {
    "id": 718,
    "status": 1,
    "orgId": 12624,
    "orgSlug": "robustperception",
    "orgName": "Robust Perception",
    "slug": "host-stats",
    "downloads": 1769,
    "revisionId": 997,
    "revision": 1,
    "name": "Host Stats - Prometheus Node Exporter",
    "description": "Basic host stats: CPU, Memory Usage, Disk Utilisation,  Filesystem usage and Predicted time to filesystems filling",
    "readme": "Your node exporters should have the job label set to `node` in your `prometheus.yml`.",
    "collectorType": "nodeExporter",
    "collectorConfig": "This dashboard uses the default Node Exporter metrics on Linux.",
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-10-23T19:49:45.000Z",
    "updatedAt": "2016-10-23T19:57:48.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/718"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/718/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/718/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/718/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/robustperception"
      },
      {
        "rel": "images",
        "href": "/dashboards/718/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/718/thumbnails"
      }
    ]
  },
  {
    "id": 941,
    "status": 1,
    "orgId": 36263,
    "orgSlug": "sergeygalkin",
    "orgName": "sergeygalkin",
    "slug": "nodes-systems-statisticis",
    "downloads": 76,
    "revisionId": 1355,
    "revision": 1,
    "name": "HW nodes statistics for Open Stack in Kubernetes ",
    "description": "HW nodes statistics for Open Stack in Kubernetes ",
    "readme": "",
    "collectorType": "Telegraf",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-11-22T15:48:24.000Z",
    "updatedAt": "2016-11-22T15:50:23.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/941"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/941/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/941/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/941/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/sergeygalkin"
      },
      {
        "rel": "images",
        "href": "/dashboards/941/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/941/thumbnails"
      }
    ]
  },
  {
    "id": 2113,
    "status": 1,
    "orgId": 58111,
    "orgSlug": "ssvinarciuc",
    "orgName": "Sergiu Svinarciuc",
    "slug": "hystrix-dashboard",
    "downloads": 46,
    "revisionId": 2782,
    "revision": 1,
    "name": "Hystrix Dashboard",
    "description": "Dashboard to monitor key metrics for Hystrix. The Hystrix metrics are published using Prometheus' simpleclient through this library https://github.com/soundcloud/prometheus-hystrix",
    "readme": "",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-04-26T21:44:36.000Z",
    "updatedAt": "2017-04-26T23:27:20.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/2113"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/2113/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/2113/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/2113/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/ssvinarciuc"
      },
      {
        "rel": "images",
        "href": "/dashboards/2113/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/2113/thumbnails"
      }
    ]
  },
  {
    "id": 411,
    "status": 1,
    "orgId": 14309,
    "orgSlug": "retzkek",
    "orgName": "Kevin Retzke",
    "slug": "internal-grafana-stats",
    "downloads": 96,
    "revisionId": 555,
    "revision": 2,
    "name": "Internal Grafana Stats (Prometheus)",
    "description": "Data Proxy request timings (percentiles), dashboard loads, logins etc, Prometheus version.",
    "readme": "This is a version of the official [Internal Grafana Stats](https://grafana.net/dashboards/55) dashboard, modified to use data from Prometheus. The data should be scraped into Prometheus using the [graphite exporter](https://github.com/prometheus/graphite_exporter) with the following mapping:\r\n\r\n```\r\ngrafana.*.api.dataproxy.request.*.count\r\nname=\"grafana_api_proxy_requests\"\r\ninstance=\"$1\"\r\ngroup=\"$2\"\r\njob=\"grafana\"\r\n\r\ngrafana.*.api.dataproxy.request.*.min\r\nname=\"grafana_api_proxy_request_duration_seconds_min\"\r\ninstance=\"$1\"\r\ngroup=\"$2\"\r\njob=\"grafana\"\r\n\r\ngrafana.*.api.dataproxy.request.*.max\r\nname=\"grafana_api_proxy_request_duration_seconds_max\"\r\ninstance=\"$1\"\r\ngroup=\"$2\"\r\njob=\"grafana\"\r\n\r\ngrafana.*.api.dataproxy.request.*.mean\r\nname=\"grafana_api_proxy_request_duration_seconds_mean\"\r\ninstance=\"$1\"\r\ngroup=\"$2\"\r\njob=\"grafana\"\r\n\r\ngrafana.*.api.dataproxy.request.*.std\r\nname=\"grafana_api_proxy_request_duration_seconds_std\"\r\ninstance=\"$1\"\r\ngroup=\"$2\"\r\njob=\"grafana\"\r\n\r\ngrafana.*.api.*.*.count\r\nname=\"grafana_api_requests\"\r\ninstance=\"$1\"\r\nendpoint=\"$2\"\r\naction=\"$3\"\r\njob=\"grafana\"\r\n\r\ngrafana.*.api.*.*.min\r\nname=\"grafana_api_request_duration_seconds_min\"\r\ninstance=\"$1\"\r\nendpoint=\"$2\"\r\naction=\"$3\"\r\njob=\"grafana\"\r\n\r\ngrafana.*.api.*.*.max\r\nname=\"grafana_api_request_duration_seconds_max\"\r\ninstance=\"$1\"\r\nendpoint=\"$2\"\r\naction=\"$3\"\r\njob=\"grafana\"\r\n\r\ngrafana.*.api.*.*.mean\r\nname=\"grafana_api_request_duration_seconds_mean\"\r\ninstance=\"$1\"\r\nendpoint=\"$2\"\r\naction=\"$3\"\r\njob=\"grafana\"\r\n\r\ngrafana.*.api.*.*.std\r\nname=\"grafana_api_request_duration_seconds_std\"\r\ninstance=\"$1\"\r\nendpoint=\"$2\"\r\naction=\"$3\"\r\njob=\"grafana\"\r\n\r\ngrafana.*.instance_start.count\r\nname=\"grafana_instance_starts\"\r\ninstance=\"$1\"\r\njob=\"grafana\"\r\n\r\ngrafana.*.models.*.*.count\r\nname=\"grafana_db_events\"\r\ninstance=\"$1\"\r\nmodel=\"$2\"\r\naction=\"$3\"\r\njob=\"grafana\"\r\n```\r\n",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-09-09T22:49:52.000Z",
    "updatedAt": "2016-09-09T23:01:11.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/411"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/411/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/411/revisions/2"
      },
      {
        "rel": "download",
        "href": "/dashboards/411/revisions/2/download"
      },
      {
        "rel": "org",
        "href": "/orgs/retzkek"
      },
      {
        "rel": "images",
        "href": "/dashboards/411/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/411/thumbnails"
      }
    ]
  },
  {
    "id": 306,
    "status": 1,
    "orgId": 25767,
    "orgSlug": "lubovarganike",
    "orgName": "lubovarganike",
    "slug": "jenkins-performance-and-health-overview",
    "downloads": 484,
    "revisionId": 402,
    "revision": 1,
    "name": "Jenkins: Performance and health overview",
    "description": "Jobs queue speeds and rates, Executors availability, Nodes status, Jenkins and JVM resource usage.\r\n\r\nCreated as copy of a bit nicer dashboard, which is using graphite datasource.",
    "readme": "Just install https://wiki.jenkins-ci.org/display/JENKINS/Prometheus+Plugin plugin for jenkins, start monitoring it by your prometheus and than use this dashboard.\r\n\r\nNOTE: Dashboard is prepared to handle only single instance of monitored jenkins on single datasource. Should be improved by a bit templating magic.",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-08-11T15:15:28.000Z",
    "updatedAt": "2016-08-11T15:17:59.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/306"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/306/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/306/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/306/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/lubovarganike"
      },
      {
        "rel": "images",
        "href": "/dashboards/306/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/306/thumbnails"
      }
    ]
  },
  {
    "id": 2492,
    "status": 1,
    "orgId": 68168,
    "orgSlug": "chiabre",
    "orgName": "chiabre",
    "slug": "jmeter",
    "downloads": 6,
    "revisionId": 3451,
    "revision": 4,
    "name": "JMeter",
    "description": "",
    "readme": "A grafana dashboard example to inspect jmeter exporter metrics \r\n\r\nhttps://github.com/johrstrom/jmeter-prometheus-plugin",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-06-20T12:18:02.000Z",
    "updatedAt": "2017-06-30T17:00:26.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/2492"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/2492/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/2492/revisions/4"
      },
      {
        "rel": "download",
        "href": "/dashboards/2492/revisions/4/download"
      },
      {
        "rel": "org",
        "href": "/orgs/chiabre"
      },
      {
        "rel": "images",
        "href": "/dashboards/2492/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/2492/thumbnails"
      }
    ]
  },
  {
    "id": 721,
    "status": 1,
    "orgId": 12624,
    "orgSlug": "robustperception",
    "orgName": "Robust Perception",
    "slug": "kafka",
    "downloads": 914,
    "revisionId": 1000,
    "revision": 1,
    "name": "Kafka Overview",
    "description": "Kafka resource usage and throughput",
    "readme": "See the [blog post]( https://www.robustperception.io/monitoring-kafka-with-prometheus/) for how to setup the JMX Exporter to use this dashboard.\r\n\r\nThe job label must be `kafka`.",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-10-23T20:14:49.000Z",
    "updatedAt": "2016-10-23T20:23:37.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/721"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/721/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/721/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/721/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/robustperception"
      },
      {
        "rel": "images",
        "href": "/dashboards/721/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/721/thumbnails"
      }
    ]
  },
  {
    "id": 226,
    "status": 1,
    "orgId": 22927,
    "orgSlug": "katosys",
    "orgName": "The Káto System",
    "slug": "k-to",
    "downloads": 104,
    "revisionId": 692,
    "revision": 5,
    "name": "kato::dashboard",
    "description": "The Káto System global dashboard.",
    "readme": "",
    "collectorType": null,
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-07-21T13:16:49.000Z",
    "updatedAt": "2016-09-28T14:59:31.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/226"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/226/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/226/revisions/5"
      },
      {
        "rel": "download",
        "href": "/dashboards/226/revisions/5/download"
      },
      {
        "rel": "org",
        "href": "/orgs/katosys"
      },
      {
        "rel": "images",
        "href": "/dashboards/226/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/226/thumbnails"
      }
    ]
  },
  {
    "id": 178,
    "status": 1,
    "orgId": 22927,
    "orgSlug": "katosys",
    "orgName": "The Káto System",
    "slug": "etcd",
    "downloads": 360,
    "revisionId": 611,
    "revision": 5,
    "name": "kato::etcd",
    "description": "The Káto System etcd dashboard",
    "readme": "This dashboard leverages the native etcd prometheus instrumentation.",
    "collectorType": null,
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-07-14T08:57:37.000Z",
    "updatedAt": "2016-09-19T15:32:25.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/178"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/178/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/178/revisions/5"
      },
      {
        "rel": "download",
        "href": "/dashboards/178/revisions/5/download"
      },
      {
        "rel": "org",
        "href": "/orgs/katosys"
      },
      {
        "rel": "images",
        "href": "/dashboards/178/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/178/thumbnails"
      }
    ]
  },
  {
    "id": 199,
    "status": 1,
    "orgId": 22927,
    "orgSlug": "katosys",
    "orgName": "The Káto System",
    "slug": "prometheus",
    "downloads": 93,
    "revisionId": 256,
    "revision": 2,
    "name": "kato::prometheus",
    "description": "Prometheus dashboard for Káto",
    "readme": "",
    "collectorType": null,
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-07-15T14:31:16.000Z",
    "updatedAt": "2016-07-15T14:51:32.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/199"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/199/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/199/revisions/2"
      },
      {
        "rel": "download",
        "href": "/dashboards/199/revisions/2/download"
      },
      {
        "rel": "org",
        "href": "/orgs/katosys"
      },
      {
        "rel": "images",
        "href": "/dashboards/199/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/199/thumbnails"
      }
    ]
  },
  {
    "id": 1471,
    "status": 1,
    "orgId": 24399,
    "orgSlug": "jsalverda",
    "orgName": "jsalverda",
    "slug": "kubernetes-apps",
    "downloads": 230,
    "revisionId": 1963,
    "revision": 1,
    "name": "Kubernetes App Metrics",
    "description": "After selecting your namespace and container you get a wealth of metrics like request rate, error rate, response times, pod count, cpu and memory usage. You can view cpu and memory usage in a variety of ways, compared to the limit, compared to the request, per pod, average per pod, etc.",
    "readme": "Run Prometheus in your Kubernetes cluster with a configuration like shown at https://github.com/prometheus/prometheus/blob/master/documentation/examples/prometheus-kubernetes.yml. This will make the data used by this dashboard available.\r\n\r\nThe haproxy stats are exported by running a sidecar container in the haproxy pod. The nginx stats originate from the nginx lua exporter, which runs in the nginx container itself.",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-02-09T13:06:44.000Z",
    "updatedAt": "2017-02-09T13:16:50.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/1471"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/1471/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/1471/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/1471/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/jsalverda"
      },
      {
        "rel": "images",
        "href": "/dashboards/1471/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/1471/thumbnails"
      }
    ]
  },
  {
    "id": 162,
    "status": 1,
    "orgId": 14819,
    "orgSlug": "nayr",
    "orgName": "Ryan vanniekerk",
    "slug": "kubernetes-pod-monitoring",
    "downloads": 1840,
    "revisionId": 204,
    "revision": 1,
    "name": "Kubernetes cluster monitoring (via Prometheus)",
    "description": "Monitor a Kubernetes cluster using Prometheus TSDB.  Shows overall cluster CPU / Memory / Disk usage as well as individual pod statistics. ",
    "readme": "# Requirements\r\n## UPDATE \r\nI've added an example config for Prometheus 1.0.0 below as well\r\n\r\nPrometheus configured to collect data from the following inside of a Kubernetes cluster: \r\n*  node-exporter\r\n*  cadvisor\r\n\r\nNode-exporter should be a run as a daemonset on every minion,  Cadvisor is built into the kubelet and just needs to be scraped via Prometheus config. \r\n\r\n# Example Prometheus Config (pre 1.0.0)\r\n\r\n```\r\nscrape_configs:\r\n- job_name: 'kubernetes-cluster'\r\n\r\n  tls_config:\r\n    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\r\n  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\r\n\r\n  kubernetes_sd_configs:\r\n  - api_servers:\r\n    - 'https://kubernetes.default.svc'\r\n    in_cluster: true\r\n\r\n  relabel_configs:\r\n  - source_labels: [__meta_kubernetes_role]\r\n    action: keep\r\n    regex: (?:apiserver|node)\r\n  - action: labelmap\r\n    regex: __meta_kubernetes_node_label_(.+)\r\n  - source_labels: [__meta_kubernetes_role]\r\n    action: replace\r\n    target_label: kubernetes_role\r\n  - source_labels: [__address__]\r\n    regex: '(.*):10250'\r\n    replacement: '${1}:10255'\r\n    target_label: __address__\r\n\r\n- job_name: 'kubernetes-node-exporter'\r\n\r\n  tls_config:\r\n    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\r\n  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\r\n\r\n  kubernetes_sd_configs:\r\n  - api_servers:\r\n    - 'https://kubernetes.default.svc'\r\n    in_cluster: true\r\n\r\n  relabel_configs:\r\n  - source_labels: [__meta_kubernetes_role]\r\n    action: keep\r\n    regex: (node)\r\n  - action: labelmap\r\n    regex: __meta_kubernetes_node_label_(.+)\r\n  - source_labels: [__meta_kubernetes_role]\r\n    action: replace\r\n    target_label: kubernetes_role\r\n  - source_labels: [__address__]\r\n    regex: '(.*):10250'\r\n    replacement: '${1}:9100'\r\n    target_label: __address__\r\n```\r\n\r\n# Example Prometheus Config (1.0.0)\r\n```\r\nglobal:\r\n  scrape_interval: 10s\r\n  scrape_timeout: 10s\r\n  evaluation_interval: 10s\r\n\r\nscrape_configs:\r\n- job_name: 'kubernetes-nodes-cadvisor'\r\n  tls_config:\r\n    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\r\n  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\r\n  kubernetes_sd_configs:\r\n  - api_servers:\r\n    - 'https://kubernetes.default.svc'\r\n    in_cluster: true\r\n    role: node\r\n  relabel_configs:\r\n  - action: labelmap\r\n    regex: __meta_kubernetes_node_label_(.+)\r\n  - source_labels: [__meta_kubernetes_role]\r\n    action: replace\r\n    target_label: kubernetes_role\r\n  - source_labels: [__address__]\r\n    regex: '(.*):10250'\r\n    replacement: '${1}:10255'\r\n    target_label: __address__\r\n\r\n- job_name: 'kubernetes-apiserver-cadvisor'\r\n  tls_config:\r\n    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\r\n  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\r\n  kubernetes_sd_configs:\r\n  - api_servers:\r\n    - 'https://kubernetes.default.svc'\r\n    in_cluster: true\r\n    role: apiserver\r\n  relabel_configs:\r\n  - action: labelmap\r\n    regex: __meta_kubernetes_node_label_(.+)\r\n  - source_labels: [__meta_kubernetes_role]\r\n    action: replace\r\n    target_label: kubernetes_role\r\n  - source_labels: [__address__]\r\n    regex: '(.*):10250'\r\n    replacement: '${1}:10255'\r\n    target_label: __address__\r\n\r\n- job_name: 'kubernetes-node-exporter'\r\n  tls_config:\r\n    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\r\n  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\r\n  kubernetes_sd_configs:\r\n  - api_servers:\r\n    - 'https://kubernetes.default.svc'\r\n    in_cluster: true\r\n    role: node\r\n  relabel_configs:\r\n  - action: labelmap\r\n    regex: __meta_kubernetes_node_label_(.+)\r\n  - source_labels: [__meta_kubernetes_role]\r\n    action: replace\r\n    target_label: kubernetes_role\r\n  - source_labels: [__address__]\r\n    regex: '(.*):10250'\r\n    replacement: '${1}:9100'\r\n    target_label: __address__\r\n```\r\n\r\n# Suggested Grafana manifest for Kubernetes (if you aren't using the built-in monitoring addon)\r\n```\r\napiVersion: v1\r\nkind: Service\r\nmetadata:\r\n  name: grafana\r\nspec:\r\n  ports:\r\n  - port: 3000\r\n    targetPort: 3000\r\n  selector:\r\n    app: grafana\r\n---\r\napiVersion: extensions/v1beta1\r\nkind: Deployment\r\nmetadata:\r\n  labels:\r\n    app: grafana\r\n  name: grafana\r\nspec:\r\n  replicas: 1\r\n  revisionHistoryLimit: 2\r\n  template:\r\n    metadata:\r\n      labels:\r\n        app: grafana\r\n    spec:\r\n      containers:\r\n      - image: grafana/grafana:3.1.0\r\n        name: grafana\r\n        imagePullPolicy: Always\r\n        ports:\r\n        - containerPort: 3000\r\n        env:\r\n          - name: GF_AUTH_BASIC_ENABLED\r\n            value: \"false\"\r\n          - name: GF_AUTH_ANONYMOUS_ENABLED\r\n            value: \"true\"\r\n          - name: GF_AUTH_ANONYMOUS_ORG_ROLE\r\n            value: Admin\r\n          - name: GF_SERVER_ROOT_URL\r\n            value: /api/v1/proxy/namespaces/default/services/grafana/\r\n```\r\n\r\n# Additional support\r\n\r\nFeel free to tweet [@iamnayr](https://twitter.com/iamnayr) or join the [Kubernetes slack channel](http://slack.k8s.io/) and ping @ryan_sf ",
    "collectorType": "nodeExporter",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-07-12T21:39:11.000Z",
    "updatedAt": "2016-07-20T17:23:47.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/162"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/162/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/162/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/162/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/nayr"
      },
      {
        "rel": "images",
        "href": "/dashboards/162/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/162/thumbnails"
      }
    ]
  },
  {
    "id": 708,
    "status": 1,
    "orgId": 32910,
    "orgSlug": "sura2107",
    "orgName": "sura2107",
    "slug": "kubernetes-cluster-monitoring-via-prometheus",
    "downloads": 168,
    "revisionId": 984,
    "revision": 1,
    "name": "Kubernetes cluster monitoring (via Prometheus)",
    "description": "Monitor a Kubernetes cluster using Prometheus TSDB.  Shows overall cluster CPU / Memory / Disk usage as well as individual pod statistics. ",
    "readme": "",
    "collectorType": "Telegraf",
    "collectorConfig": null,
    "collectorPluginList": "influxdb",
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-10-22T03:03:31.000Z",
    "updatedAt": "2016-10-22T03:05:36.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/708"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/708/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/708/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/708/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/sura2107"
      },
      {
        "rel": "images",
        "href": "/dashboards/708/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/708/thumbnails"
      }
    ]
  },
  {
    "id": 315,
    "status": 1,
    "orgId": 25650,
    "orgSlug": "instrumentisto",
    "orgName": "Instrumentisto Team",
    "slug": "kubernetes-cluster-monitoring-via-prometheus",
    "downloads": 1812,
    "revisionId": 1247,
    "revision": 2,
    "name": "Kubernetes cluster monitoring (via Prometheus)",
    "description": "Monitors Kubernetes cluster using Prometheus. Shows overall cluster CPU / Memory / Filesystem usage as well as individual pod, containers, systemd services statistics. Uses cAdvisor metrics only.",
    "readme": "[![release](https://img.shields.io/github/release/instrumentisto/grafana-dashboard-kubernetes-prometheus.svg)](https://github.com/instrumentisto/grafana-dashboard-kubernetes-prometheus/releases/tag/v2)\r\n[![license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/instrumentisto/grafana-dashboard-kubernetes-prometheus/blob/master/LICENSE.md)\r\n[![k8s](https://img.shields.io/badge/kubernetes-%5E1.4.0-green.svg)](https://github.com/kubernetes/kubernetes)\r\n[![prometheus](https://img.shields.io/badge/prometheus-%5E1.3.0-green.svg)](https://github.com/prometheus/prometheus)\r\n[![grafana](https://img.shields.io/badge/grafana-%5E3.1.1-green.svg)](https://github.com/grafana/grafana)\r\n[![link](https://img.shields.io/badge/grafana.net-link-blue.svg)](https://grafana.net/dashboards/315)\r\n\r\n\r\nInitial idea was taken from [this dashboard](https://grafana.net/dashboards/162)\r\nand improved to exclude `node-exporter` dependency and to give more information\r\nabout cluster state.\r\n\r\n\r\n\r\n## Requirements\r\n\r\nYou only need to have running [Kubernetes](http://kubernetes.io) cluster with \r\ndeployed [Prometheus](https://prometheus.io).\r\nPrometheus will use metrics provided by [cAdvisor](https://github.com/google/cadvisor) \r\nvia [kubelet](http://kubernetes.io/docs/admin/kubelet) service (runs on\r\neach node of Kubernetes cluster by default) and via \r\n[kube-apiserver](http://kubernetes.io/docs/admin/kube-apiserver) service only.\r\n\r\nYour Prometheus configuration has to contain following\r\n[`scrape_configs`](https://prometheus.io/docs/operating/configuration/#scrape_config): \r\n```yaml\r\nscrape_configs:\r\n  - job_name: kubernetes-nodes-cadvisor\r\n    scrape_interval: 10s\r\n    scrape_timeout: 10s\r\n    scheme: https  # remove if you want to scrape metrics on insecure port\r\n    tls_config:\r\n      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\r\n    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\r\n    kubernetes_sd_configs:\r\n      - role: node\r\n    relabel_configs:\r\n      - action: labelmap\r\n        regex: __meta_kubernetes_node_label_(.+)\r\n    metric_relabel_configs:\r\n      - action: replace\r\n        source_labels: [id]\r\n        regex: '^/machine\\.slice/machine-rkt\\\\x2d([^\\\\]+)\\\\.+/([^/]+)\\.service$'\r\n        target_label: rkt_container_name\r\n        replacement: '${2}-${1}'\r\n      - action: replace\r\n        source_labels: [id]\r\n        regex: '^/system\\.slice/(.+)\\.service$'\r\n        target_label: systemd_service_name\r\n        replacement: '${1}'\r\n```\r\n\r\n\r\n\r\n## Features\r\n\r\n- Total and used cluster resources: CPU, memory, filesystem.  \r\n  And total cluster network I/O pressure.  \r\n  ![Total and used cluster resources](https://raw.githubusercontent.com/instrumentisto/grafana-dashboard-kubernetes-prometheus/master/screens/total.png)\r\n- [Kubernetes pods](http://kubernetes.io/docs/user-guide/pods) usage:\r\n  CPU, memory, network I/O.  \r\n  ![Pods usage](https://raw.githubusercontent.com/instrumentisto/grafana-dashboard-kubernetes-prometheus/master/screens/pods.png)\r\n- Containers usage: CPU, memory, network I/O.  \r\n  [Docker](https://www.docker.com) and [rkt](https://coreos.com/rkt) containers\r\n  which runs on cluster nodes but outside Kubernetes are also monitored.  \r\n  ![Containers usage](https://raw.githubusercontent.com/instrumentisto/grafana-dashboard-kubernetes-prometheus/master/screens/containers.png)\r\n- [systemd](https://freedesktop.org/wiki/Software/systemd) system services\r\n  usage: CPU, memory.  \r\n  ![systemd usage](https://raw.githubusercontent.com/instrumentisto/grafana-dashboard-kubernetes-prometheus/master/screens/systemd.png)\r\n- Showing all above metrics both for all cluster and each node separately.  \r\n  ![Filtering metrics by nodes](https://raw.githubusercontent.com/instrumentisto/grafana-dashboard-kubernetes-prometheus/master/screens/by_nodes.png)\r\n\r\n\r\n\r\n## Troubleshooting\r\n\r\nIf filesystem usage panels display `N/A`, you should correct\r\n`device=~\"^/dev/[vs]da9$\"` filter parameter in metrics query with devices your\r\nsystem actually has. ",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-08-13T16:19:19.000Z",
    "updatedAt": "2016-11-16T11:43:35.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/315"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/315/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/315/revisions/2"
      },
      {
        "rel": "download",
        "href": "/dashboards/315/revisions/2/download"
      },
      {
        "rel": "org",
        "href": "/orgs/instrumentisto"
      },
      {
        "rel": "images",
        "href": "/dashboards/315/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/315/thumbnails"
      }
    ]
  },
  {
    "id": 1621,
    "status": 1,
    "orgId": 47646,
    "orgSlug": "cjdc",
    "orgName": "cjdc",
    "slug": "kubernetes-cluster-monitoring-via-prometheus",
    "downloads": 738,
    "revisionId": 2176,
    "revision": 1,
    "name": "Kubernetes cluster monitoring (via Prometheus)",
    "description": "Monitors Kubernetes cluster using Prometheus. Shows overall cluster CPU / Memory / Filesystem usage as well as individual pod, containers, systemd services statistics. Uses cAdvisor metrics only.",
    "readme": "Same dashboard as what can be found [here](https://grafana.net/dashboards/315) but with a metric query change for the Cluster Filesystem usage by aggregating all available partitions provided by cAdvisor instead of just /dev/[sv]da9.\r\n",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-03-03T07:43:34.000Z",
    "updatedAt": "2017-03-03T07:50:56.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/1621"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/1621/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/1621/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/1621/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/cjdc"
      },
      {
        "rel": "images",
        "href": "/dashboards/1621/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/1621/thumbnails"
      }
    ]
  },
  {
    "id": 2115,
    "status": 1,
    "orgId": 58125,
    "orgSlug": "ceason",
    "orgName": "ceason",
    "slug": "kubernetes-cluster-monitoring-via-prometheus-v2",
    "downloads": 29,
    "revisionId": 2784,
    "revision": 1,
    "name": "Kubernetes cluster monitoring (via Prometheus) v2",
    "description": "This is a copy of https://grafana.com/dashboards/315 with filesystem usage tweaked to work with minikube",
    "readme": "This is a copy of https://grafana.com/dashboards/315 with filesystem usage tweaked to work with minikube",
    "collectorType": null,
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-04-27T00:43:02.000Z",
    "updatedAt": "2017-04-27T00:46:09.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/2115"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/2115/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/2115/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/2115/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/ceason"
      },
      {
        "rel": "images",
        "href": "/dashboards/2115/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/2115/thumbnails"
      }
    ]
  },
  {
    "id": 741,
    "status": 1,
    "orgId": 33234,
    "orgSlug": "orezi",
    "orgName": "Ore Olarewaju",
    "slug": "deployment-metrics",
    "downloads": 395,
    "revisionId": 1023,
    "revision": 1,
    "name": "Kubernetes Deployment metrics",
    "description": "Monitors Kubernetes deployments in cluster using Prometheus. Shows overall cluster CPU / Memory of deployments, replicas in each deployment. Uses Kube state metrics and cAdvisor metrics ",
    "readme": "Kube State Metrics agent is used to expose cluster level metrics of our Kubernetes cluster https://github.com/kubernetes/kube-state-metrics",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-10-25T10:27:11.000Z",
    "updatedAt": "2016-10-26T16:02:23.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/741"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/741/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/741/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/741/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/orezi"
      },
      {
        "rel": "images",
        "href": "/dashboards/741/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/741/thumbnails"
      }
    ]
  },
  {
    "id": 762,
    "status": 1,
    "orgId": 33234,
    "orgSlug": "orezi",
    "orgName": "Ore Olarewaju",
    "slug": "kafka-metrics",
    "downloads": 199,
    "revisionId": 1062,
    "revision": 1,
    "name": "Kubernetes Kafka resource metrics",
    "description": "Monitors Kafka metrics from Prometheus. Shows active controllers, partitions, ISR shrink rate, purgatory size etc. Uses JMX exporter.",
    "readme": "Setup JMX exporter: https://github.com/prometheus/jmx_exporter as it exposes kafka metrics in our kubernetes cluster.",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-10-26T15:41:35.000Z",
    "updatedAt": "2016-10-26T15:54:04.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/762"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/762/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/762/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/762/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/orezi"
      },
      {
        "rel": "images",
        "href": "/dashboards/762/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/762/thumbnails"
      }
    ]
  },
  {
    "id": 747,
    "status": 1,
    "orgId": 33234,
    "orgSlug": "orezi",
    "orgName": "Ore Olarewaju",
    "slug": "pod-metrics",
    "downloads": 451,
    "revisionId": 1059,
    "revision": 2,
    "name": "Kubernetes Pod Metrics",
    "description": "Monitors Kubernetes cluster using Prometheus. Shows overall cluster CPU / Memory / Filesystem usage as well as individual pod, containers, systemd services statistics. Uses cAdvisor metrics only.",
    "readme": "Uses Kube state metrics agent to expose cluster level metrics about individual pods and deployments. https://github.com/kubernetes/kube-state-metrics",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-10-25T10:48:12.000Z",
    "updatedAt": "2016-10-26T16:04:24.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/747"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/747/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/747/revisions/2"
      },
      {
        "rel": "download",
        "href": "/dashboards/747/revisions/2/download"
      },
      {
        "rel": "org",
        "href": "/orgs/orezi"
      },
      {
        "rel": "images",
        "href": "/dashboards/747/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/747/thumbnails"
      }
    ]
  },
  {
    "id": 737,
    "status": 1,
    "orgId": 26318,
    "orgSlug": "giantswarm",
    "orgName": "Giant Swarm",
    "slug": "kubernetes-pod-resources",
    "downloads": 145,
    "revisionId": 1179,
    "revision": 2,
    "name": "Kubernetes Pod Resources",
    "description": "Shows resource usage of Kubernetes pods.",
    "readme": "See https://github.com/giantswarm/kubernetes-prometheus for setting up Prometheus and Grafana on Kubernetes to use this Dashboard.",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-10-25T08:50:34.000Z",
    "updatedAt": "2016-11-05T21:22:20.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/737"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/737/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/737/revisions/2"
      },
      {
        "rel": "download",
        "href": "/dashboards/737/revisions/2/download"
      },
      {
        "rel": "org",
        "href": "/orgs/giantswarm"
      },
      {
        "rel": "images",
        "href": "/dashboards/737/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/737/thumbnails"
      }
    ]
  },
  {
    "id": 938,
    "status": 1,
    "orgId": 36263,
    "orgSlug": "sergeygalkin",
    "orgName": "sergeygalkin",
    "slug": "kubernetes-statistics",
    "downloads": 29,
    "revisionId": 1352,
    "revision": 1,
    "name": "Kubernetes with  Open Stack statistsics",
    "description": "Kubernetes statistics for Open Stack",
    "readme": "",
    "collectorType": "Telegraf",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-11-22T15:40:03.000Z",
    "updatedAt": "2016-11-22T15:42:59.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/938"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/938/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/938/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/938/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/sergeygalkin"
      },
      {
        "rel": "images",
        "href": "/dashboards/938/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/938/thumbnails"
      }
    ]
  },
  {
    "id": 597,
    "status": 1,
    "orgId": 31335,
    "orgSlug": "xiaoping378",
    "orgName": "xiaoping378",
    "slug": "kubernetes-via-xiaoping378",
    "downloads": 116,
    "revisionId": 816,
    "revision": 1,
    "name": "Kubernetes资源利用率监控(via xiaoping378)",
    "description": "Monitors Kubernetes cluster using Prometheus. Shows overall cluster CPU / Memory / Filesystem usage as well as individual pod, containers, systemd services statistics. Uses cAdvisor metrics only.",
    "readme": "## 在github上有部署prometheus的细节\r\n## [github链接](https://github.com/xiaoping378/kubernetes-prometheus)\r\n",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-10-09T04:53:30.000Z",
    "updatedAt": "2016-10-09T05:04:55.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/597"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/597/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/597/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/597/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/xiaoping378"
      },
      {
        "rel": "images",
        "href": "/dashboards/597/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/597/thumbnails"
      }
    ]
  },
  {
    "id": 2525,
    "status": 1,
    "orgId": 69233,
    "orgSlug": "dshmelev",
    "orgName": "Dmitry Shmelev",
    "slug": "logstash",
    "downloads": 5,
    "revisionId": 3398,
    "revision": 1,
    "name": "Logstash metrics",
    "description": "Logstash monitoring via prometheus",
    "readme": "Logstash monitoring via prometheus and logstash_exporter(https://github.com/BonnierNews/logstash_exporter)",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-06-26T08:28:42.000Z",
    "updatedAt": "2017-06-27T15:06:31.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/2525"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/2525/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/2525/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/2525/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/dshmelev"
      },
      {
        "rel": "images",
        "href": "/dashboards/2525/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/2525/thumbnails"
      }
    ]
  },
  {
    "id": 2539,
    "status": 1,
    "orgId": 66364,
    "orgSlug": "jasonblais",
    "orgName": "jasonblais",
    "slug": "mattermost-performance-kpi-metrics",
    "downloads": 4,
    "revisionId": 3412,
    "revision": 1,
    "name": "Mattermost Performance KPI Metrics",
    "description": "Mattermost Performance KPI Metrics using Prometheus",
    "readme": "#### Mattermost Performance KPI Metrics\r\n\r\nPerformance monitoring support enables a Mattermost server to track system health for large Enterprise deployments through integrations with Prometheus and Grafana.\r\n\r\nThe integration supports data collection from several Mattermost servers, particularly useful if you’re running Mattermost in [high availability mode](https://docs.mattermost.com/deployment/metrics.html).\r\n\r\nFor more information on configuration and metrics collections, [visit the Mattermost documentation](https://docs.mattermost.com/deployment/metrics.html).\r\n\r\nReport issues or feedback in the [Mattermost forums](https://forum.mattermost.org/) or join the discussion in the public [Developers Performance channel](https://pre-release.mattermost.com/core/channels/developers-performance).",
    "collectorType": null,
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-06-26T21:52:35.000Z",
    "updatedAt": "2017-06-26T22:15:18.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/2539"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/2539/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/2539/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/2539/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/jasonblais"
      },
      {
        "rel": "images",
        "href": "/dashboards/2539/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/2539/thumbnails"
      }
    ]
  },
  {
    "id": 2542,
    "status": 1,
    "orgId": 66364,
    "orgSlug": "jasonblais",
    "orgName": "jasonblais",
    "slug": "mattermost-performance-monitoring",
    "downloads": 2,
    "revisionId": 3415,
    "revision": 1,
    "name": "Mattermost Performance Monitoring",
    "description": "Mattermost Performance Monitoring using Prometheus",
    "readme": "#### Mattermost Performance Monitoring\r\n\r\nPerformance monitoring support enables a Mattermost server to track system health for large Enterprise deployments through integrations with Prometheus and Grafana.\r\n\r\nThe integration supports data collection from several Mattermost servers, particularly useful if you’re running Mattermost in [high availability mode](https://docs.mattermost.com/deployment/metrics.html).\r\n\r\nFor more information on configuration and metrics collections, [visit the Mattermost documentation](https://docs.mattermost.com/deployment/metrics.html).\r\n\r\nReport issues or feedback in the [Mattermost forums](https://forum.mattermost.org/) or join the discussion in the public [Developers Performance channel](https://pre-release.mattermost.com/core/channels/developers-performance).",
    "collectorType": null,
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-06-26T22:17:24.000Z",
    "updatedAt": "2017-06-26T22:20:32.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/2542"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/2542/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/2542/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/2542/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/jasonblais"
      },
      {
        "rel": "images",
        "href": "/dashboards/2542/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/2542/thumbnails"
      }
    ]
  },
  {
    "id": 2545,
    "status": 1,
    "orgId": 66364,
    "orgSlug": "jasonblais",
    "orgName": "jasonblais",
    "slug": "mattermost-performance-monitoring-bonus-metrics",
    "downloads": 2,
    "revisionId": 3418,
    "revision": 1,
    "name": "Mattermost Performance Monitoring (Bonus Metrics)",
    "description": "Mattermost Performance Monitoring (Bonus Metrics) using Prometheus",
    "readme": "#### Mattermost Performance Monitoring (Bonus Metrics)\r\n\r\nPerformance monitoring support enables a Mattermost server to track system health for large Enterprise deployments through integrations with Prometheus and Grafana.\r\n\r\nThe integration supports data collection from several Mattermost servers, particularly useful if you’re running Mattermost in [high availability mode](https://docs.mattermost.com/deployment/metrics.html).\r\n\r\nFor more information on configuration and metrics collections, [visit the Mattermost documentation](https://docs.mattermost.com/deployment/metrics.html).\r\n\r\nReport issues or feedback in the [Mattermost forums](https://forum.mattermost.org/) or join the discussion in the public [Developers Performance channel](https://pre-release.mattermost.com/core/channels/developers-performance).",
    "collectorType": null,
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-06-26T22:21:01.000Z",
    "updatedAt": "2017-06-26T22:23:23.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/2545"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/2545/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/2545/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/2545/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/jasonblais"
      },
      {
        "rel": "images",
        "href": "/dashboards/2545/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/2545/thumbnails"
      }
    ]
  },
  {
    "id": 1096,
    "status": 1,
    "orgId": 38038,
    "orgSlug": "thulinma",
    "orgName": "thulinma",
    "slug": "mistserver-vitals",
    "downloads": 26,
    "revisionId": 1549,
    "revision": 1,
    "name": "MistServer Vitals",
    "description": "The MistServer dashboard as demo'ed on this page: http://mistserver.org/mistserver?performance",
    "readme": "This dashboard provides you with the most critical server stats for MistServer installs.\r\n\r\nTo collect the metrics, set up prometheus to scrape MistServer from port 4242 and path /somepassword, then start MistServer with the \"--prometheus somepassword\" option.\r\n\r\nSupports multiple servers through a dropdown at the top.",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-12-08T22:28:13.000Z",
    "updatedAt": "2016-12-08T22:34:43.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/1096"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/1096/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/1096/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/1096/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/thulinma"
      },
      {
        "rel": "images",
        "href": "/dashboards/1096/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/1096/thumbnails"
      }
    ]
  },
  {
    "id": 249,
    "status": 1,
    "orgId": 23094,
    "orgSlug": "ncabatoff",
    "orgName": "ncabatoff",
    "slug": "named-processes",
    "downloads": 285,
    "revisionId": 991,
    "revision": 2,
    "name": "Named processes",
    "description": "Process metrics exported by https://github.com/ncabatoff/process-exporter.",
    "readme": "Metrics shown (each broken down by group name): number of processes, memory usage (resident and virtual), CPU consumption, and I/O (bytes read and written).\r\n\r\nSee also https://grafana.net/dashboards/715 for the same data shown using stacked bar graphs.",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-07-24T23:46:27.000Z",
    "updatedAt": "2016-10-23T16:47:29.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/249"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/249/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/249/revisions/2"
      },
      {
        "rel": "download",
        "href": "/dashboards/249/revisions/2/download"
      },
      {
        "rel": "org",
        "href": "/orgs/ncabatoff"
      },
      {
        "rel": "images",
        "href": "/dashboards/249/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/249/thumbnails"
      }
    ]
  },
  {
    "id": 715,
    "status": 1,
    "orgId": 23094,
    "orgSlug": "ncabatoff",
    "orgName": "ncabatoff",
    "slug": "named-processes-stacked",
    "downloads": 71,
    "revisionId": 994,
    "revision": 1,
    "name": "Named processes stacked",
    "description": "Process metrics exported by https://github.com/ncabatoff/process-exporter, stacked.",
    "readme": "Metrics shown (each broken down by group name): number of processes, memory usage (resident and virtual), CPU consumption, and I/O (bytes read and written).\r\n\r\nThis is the same data presented in https://grafana.net/dashboards/249 but with stacked bar graphs.",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-10-23T16:45:11.000Z",
    "updatedAt": "2016-10-23T16:46:57.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/715"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/715/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/715/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/715/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/ncabatoff"
      },
      {
        "rel": "images",
        "href": "/dashboards/715/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/715/thumbnails"
      }
    ]
  },
  {
    "id": 2279,
    "status": 1,
    "orgId": 61676,
    "orgSlug": "colinsullivan",
    "orgName": "Colin Sullivan",
    "slug": "nats-servers",
    "downloads": 8,
    "revisionId": 2990,
    "revision": 1,
    "name": "NATS Server Dashboard",
    "description": "NATS Server Dashboard for use with the Prometheus NATS Exporter",
    "readme": "# The NATS Server Dashboard\r\n\r\n [NATS](http://www.nats.io/) acts as a central nervous system for distributed systems at scale, such as mobile devices, IoT networks, and cloud native infrastructure.  This is a dashboard for use with the [Prometheus NATS Exporter](https://github.com/nats-io/prometheus-nats-exporter), which provides NATS server metrics through Prometheus.  \r\n\r\nMetrics such as CPU utilization, memory usage, throughput, connection counts, and subscription counts are displayed.  Multiple NATS servers can be monitored in the same dashboard to provide a complete view of your NATS server cluster.\r\n\r\nThis is also a great start to develop your own custom NATS dashboard.\r\n\r\n## Walkthrough\r\nA walkthrough setting up Grafana, NATS,  and Prometheus can be found [here](https://github.com/nats-io/prometheus-nats-exporter/tree/master/walkthrough).  \r\n\r\n## Issues and Suggestions\r\nPlease report any issues, suggestions, or feature requests through github, by creating an issue [here](https://github.com/nats-io/prometheus-nats-exporter/issues/new).\r\n\r\n## More Information\r\nVisit [http://nats.io](http://nats.io) for additional information.\r\n\r\n",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-05-16T21:08:38.000Z",
    "updatedAt": "2017-05-17T15:18:28.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/2279"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/2279/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/2279/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/2279/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/colinsullivan"
      },
      {
        "rel": "images",
        "href": "/dashboards/2279/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/2279/thumbnails"
      }
    ]
  },
  {
    "id": 462,
    "status": 1,
    "orgId": 29304,
    "orgSlug": "lefthand",
    "orgName": "lefthand",
    "slug": "nginx",
    "downloads": 693,
    "revisionId": 606,
    "revision": 1,
    "name": "Nginx Overview",
    "description": "Shows stats built from the Prometheus Nginx plugin.",
    "readme": "Displays stats from the Nginx Prometheus exporter:\r\n\r\nhttps://github.com/knyar/nginx-lua-prometheus\r\n\r\nAssumes you have a 'role' attribute on your servers. ",
    "collectorType": null,
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-09-17T00:43:17.000Z",
    "updatedAt": "2016-09-17T00:52:40.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/462"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/462/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/462/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/462/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/lefthand"
      },
      {
        "rel": "images",
        "href": "/dashboards/462/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/462/thumbnails"
      }
    ]
  },
  {
    "id": 1623,
    "status": 1,
    "orgId": 43183,
    "orgSlug": "galexrt",
    "orgName": "galexrt",
    "slug": "nginx-stats",
    "downloads": 160,
    "revisionId": 2178,
    "revision": 1,
    "name": "Nginx Stats",
    "description": "Show stats from the hnlq715/nginx-vts-exporter.",
    "readme": "## Requirements\r\n* Prometheus Datasource\r\n* Running hnlq715/nginx-vts-exporter",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-03-03T10:26:17.000Z",
    "updatedAt": "2017-03-03T10:28:36.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/1623"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/1623/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/1623/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/1623/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/galexrt"
      },
      {
        "rel": "images",
        "href": "/dashboards/1623/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/1623/thumbnails"
      }
    ]
  },
  {
    "id": 1853,
    "status": 1,
    "orgId": 43183,
    "orgSlug": "galexrt",
    "orgName": "galexrt",
    "slug": "node-mdadm",
    "downloads": 38,
    "revisionId": 2480,
    "revision": 1,
    "name": "Node - mdadm",
    "description": "Prometheus node_exporter mdadm module dashboard. Per Server and global view.",
    "readme": "This dashboard is for the prometheus/node_exporter mdadm module.\r\nIt shows:\r\n* Active Disks Stat\r\n* Installed Disks Stat\r\n* Block Sync Ratio Stat\r\n* Sync State (Total, Synced Blocks) Graph",
    "collectorType": "nodeExporter",
    "collectorConfig": "No special configuration required.\r\nExcept the instance label (which is default for Prometheus).",
    "collectorPluginList": "mdadm",
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-04-04T08:34:04.000Z",
    "updatedAt": "2017-04-04T08:36:24.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/1853"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/1853/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/1853/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/1853/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/galexrt"
      },
      {
        "rel": "images",
        "href": "/dashboards/1853/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/1853/thumbnails"
      }
    ]
  },
  {
    "id": 1856,
    "status": 1,
    "orgId": 43183,
    "orgSlug": "galexrt",
    "orgName": "galexrt",
    "slug": "node-network-overview",
    "downloads": 154,
    "revisionId": 2483,
    "revision": 1,
    "name": "Node - Network Overview",
    "description": "Dashboard to view multiple servers",
    "readme": "This dashboard features a node selector with an \"all\" option.\r\nSome of the network graphs can be filtered down to the interface which can be selected in the drop down.\r\n\r\nThis dashboard shows the following graphs/stats:\r\n* System Load\r\n* Network Traffic\r\n* Network Utilization\r\n* Traffic In/Out\r\n* Netstat TCP and UDP\r\n* Conntrack",
    "collectorType": "nodeExporter",
    "collectorConfig": "Default configuration should cover the required collectors.",
    "collectorPluginList": "netdev, netstat, cpu, conntrack",
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-04-04T08:37:12.000Z",
    "updatedAt": "2017-04-04T08:41:52.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/1856"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/1856/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/1856/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/1856/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/galexrt"
      },
      {
        "rel": "images",
        "href": "/dashboards/1856/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/1856/thumbnails"
      }
    ]
  },
  {
    "id": 1860,
    "status": 1,
    "orgId": 54000,
    "orgSlug": "idealista",
    "orgName": "idealista",
    "slug": "node-exporter-full",
    "downloads": 863,
    "revisionId": 3308,
    "revision": 4,
    "name": "Node Exporter Full",
    "description": "",
    "readme": "Nearly all values exported by Prometheus node exporter graphed.\r\n\r\nAvailable on github: https://github.com/rfrail3/grafana-dashboards.git",
    "collectorType": "nodeExporter",
    "collectorConfig": null,
    "collectorPluginList": "conntrack, cpu, diskstats, entropy, filefd, filesystem, loadavg, meminfo, netdev, netstat, stat, time, vmstat, interrupts",
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-04-04T10:21:52.000Z",
    "updatedAt": "2017-06-14T08:45:19.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/1860"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/1860/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/1860/revisions/4"
      },
      {
        "rel": "download",
        "href": "/dashboards/1860/revisions/4/download"
      },
      {
        "rel": "org",
        "href": "/orgs/idealista"
      },
      {
        "rel": "images",
        "href": "/dashboards/1860/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/1860/thumbnails"
      }
    ]
  },
  {
    "id": 1442,
    "status": 1,
    "orgId": 44459,
    "orgSlug": "sigoden",
    "orgName": "sigoden",
    "slug": "machine",
    "downloads": 165,
    "revisionId": 1943,
    "revision": 1,
    "name": "Node exporter metrics on docker swarm mode",
    "description": "A simple overview of the most important Docker metrics export by node-expoter on docker swarm mode. ",
    "readme": "This is a dashboard for monitoring Docker host metrics collected by node-expoter and stored in Prometheus TSDB.\r\n",
    "collectorType": "nodeExporter",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-02-07T02:23:50.000Z",
    "updatedAt": "2017-02-07T02:32:14.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/1442"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/1442/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/1442/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/1442/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/sigoden"
      },
      {
        "rel": "images",
        "href": "/dashboards/1442/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/1442/thumbnails"
      }
    ]
  },
  {
    "id": 405,
    "status": 1,
    "orgId": 27444,
    "orgSlug": "knut",
    "orgName": "Knut Ytterhaug",
    "slug": "node-exporter-server-metrics",
    "downloads": 3630,
    "revisionId": 2844,
    "revision": 5,
    "name": "Node Exporter Server Metrics",
    "description": "Dashboard to view multiple servers",
    "readme": "A simple dashboard configured to be able to view multiple servers side by side.\r\n\r\nWas originally designed to be similar to the default Munin server dashboard. Effort has been made to make the CPU and Memory graphs to look similar to Munin style graphs.\r\n\r\n<https://github.com/finn-no/grafana-dashboards>\r\n\r\nFeatures:\r\n* CPU (system, user, nice, iowait, steal, idle, irq, softirq, guest)\r\n* Memory (Apps, Buffers, Cached, Free, Sla, SwapCached, PageTables, VmallocUser, Swap, Committed, Mapped, Active, Inactive)\r\n* Load\r\n* Disk Space Used in percent\r\n* Disk Utilization per Device\r\n* Disk IOS per device (read, write)\r\n* Disk Throughput per Device (read, write)\r\n* Context Switches\r\n* Network Traffic (In, Out)\r\n* Netstat (Established)\r\n* UDP stats (InDatagrams, InErrors, OutDatagrams, NoPorts)\r\n* Conntrack\r\n\r\nUsing negative Y-axes to be able to show both reads and writes in the same graphs nicely.\r\n\r\nUpdated 03.05.2017 with sort ordering for node selector. ",
    "collectorType": "nodeExporter",
    "collectorConfig": "Using vanilla prometheus node exporter data.",
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-09-09T12:23:39.000Z",
    "updatedAt": "2017-05-03T06:19:24.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/405"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/405/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/405/revisions/5"
      },
      {
        "rel": "download",
        "href": "/dashboards/405/revisions/5/download"
      },
      {
        "rel": "org",
        "href": "/orgs/knut"
      },
      {
        "rel": "images",
        "href": "/dashboards/405/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/405/thumbnails"
      }
    ]
  },
  {
    "id": 704,
    "status": 1,
    "orgId": 32876,
    "orgSlug": "clagos",
    "orgName": "clagos",
    "slug": "node-exporter-single-server",
    "downloads": 1193,
    "revisionId": 974,
    "revision": 1,
    "name": "Node exporter server stats",
    "description": "Dashboard to get an overview of one server",
    "readme": "Basic dashboard for viewing multiple OS basic metrics from prometheus's node_exporter. It has templating for selecting a node",
    "collectorType": "nodeExporter",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-10-21T15:06:09.000Z",
    "updatedAt": "2016-10-21T15:16:33.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/704"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/704/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/704/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/704/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/clagos"
      },
      {
        "rel": "images",
        "href": "/dashboards/704/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/704/thumbnails"
      }
    ]
  },
  {
    "id": 22,
    "status": 1,
    "orgId": 14101,
    "orgSlug": "bergquist",
    "orgName": "Carl Bergquist",
    "slug": "node-exporter-single-server",
    "downloads": 3187,
    "revisionId": 1987,
    "revision": 6,
    "name": "Node exporter single server",
    "description": "Dashboard to get an overview of one server",
    "readme": "Dashboard for getting a quickly overview of a single server.\r\nBased on the data from [node_exporter](https://github.com/prometheus/node_exporter) using default flags.\r\n\r\nThe dashboard includes \r\n - Idle cpu per core\r\n - System load 1m/5m/15m\r\n - Free memory\r\n - Disk usage from all avilable disks.\r\n - Data transfer (received/transmitted)\r\n\r\n## Feedback\r\nComments? suggestions? Please open issues/pull requests to [https://github.com/bergquist/dashboards](https://github.com/bergquist/dashboards)\r\n",
    "collectorType": "nodeExporter",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-06-21T12:19:27.000Z",
    "updatedAt": "2017-02-14T08:29:22.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/22"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/22/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/22/revisions/6"
      },
      {
        "rel": "download",
        "href": "/dashboards/22/revisions/6/download"
      },
      {
        "rel": "org",
        "href": "/orgs/bergquist"
      },
      {
        "rel": "images",
        "href": "/dashboards/22/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/22/thumbnails"
      }
    ]
  },
  {
    "id": 1523,
    "status": 1,
    "orgId": 44840,
    "orgSlug": "cherrot",
    "orgName": "cherrot",
    "slug": "node-exporter-stats",
    "downloads": 287,
    "revisionId": 2045,
    "revision": 1,
    "name": "Node exporter stats",
    "description": "Dashboard to get an overview of one server",
    "readme": "Based on https://grafana.net/dashboards/704.\r\nSupport CPU, memory, disk I/O, network I/O, network connections, etc",
    "collectorType": "nodeExporter",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-02-17T15:03:14.000Z",
    "updatedAt": "2017-02-17T15:09:10.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/1523"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/1523/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/1523/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/1523/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/cherrot"
      },
      {
        "rel": "images",
        "href": "/dashboards/1523/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/1523/thumbnails"
      }
    ]
  },
  {
    "id": 1387,
    "status": 1,
    "orgId": 43183,
    "orgSlug": "galexrt",
    "orgName": "galexrt",
    "slug": "node-metrics",
    "downloads": 233,
    "revisionId": 2004,
    "revision": 2,
    "name": "Node Metrics",
    "description": "Dashboard to view multiple servers",
    "readme": "Based on [User knut](https://grafana.net/knut) [Node Exporter Server Metrics](https://grafana.net/dashboards/405) dashboard.\r\n\r\n## Changelog\r\n\r\n### February 16th 2017\r\n* Fix the repeat for HWMon and Online/UP state\r\n\r\n### January 28th 2017\r\n* Added Online/Up state\r\n* Added HWMon Temperature\r\n* Added interrupts to Context Switches Graph\r\n* Added activeOpens and passiveOpens to the Netstat Graph\r\n* Now the node selector updates on time range chanes",
    "collectorType": "nodeExporter",
    "collectorConfig": "The default nodeExporter plugins from 28.01.2017 are used with no modifications.",
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-01-28T13:27:46.000Z",
    "updatedAt": "2017-02-16T10:52:05.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/1387"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/1387/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/1387/revisions/2"
      },
      {
        "rel": "download",
        "href": "/dashboards/1387/revisions/2/download"
      },
      {
        "rel": "org",
        "href": "/orgs/galexrt"
      },
      {
        "rel": "images",
        "href": "/dashboards/1387/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/1387/thumbnails"
      }
    ]
  },
  {
    "id": 932,
    "status": 1,
    "orgId": 36263,
    "orgSlug": "sergeygalkin",
    "orgName": "sergeygalkin",
    "slug": "open-stack",
    "downloads": 94,
    "revisionId": 1370,
    "revision": 2,
    "name": "Open Stack",
    "description": "",
    "readme": "",
    "collectorType": "Telegraf",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-11-22T15:20:43.000Z",
    "updatedAt": "2016-11-23T10:56:20.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/932"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/932/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/932/revisions/2"
      },
      {
        "rel": "download",
        "href": "/dashboards/932/revisions/2/download"
      },
      {
        "rel": "org",
        "href": "/orgs/sergeygalkin"
      },
      {
        "rel": "images",
        "href": "/dashboards/932/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/932/thumbnails"
      }
    ]
  },
  {
    "id": 455,
    "status": 1,
    "orgId": 28508,
    "orgSlug": "hagen",
    "orgName": "hagen",
    "slug": "postgres-overview",
    "downloads": 833,
    "revisionId": 602,
    "revision": 1,
    "name": "Postgres Overview",
    "description": "Performance metrics for Postgres",
    "readme": "Dashboard allow to monitor:\r\n - rows fetched/returned/inserted/updated/deleted per second\r\n- total qps based on commits and rollbacks\r\n- buffers state\r\n- deadlocks and conflicts graph\r\n- cache hit ratio graph\r\n- number of active connections\r\n\r\nThe author assumes that the metrics are scraped from various hosts and databases. That's why there are placed two templates: $host and $db. Graphs would change accordingly to selected value.\r\n\r\nRequirements: \r\nDashboard is based on the https://github.com/wrouesnel/postgres_exporter metrics\r\n\r\n",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-09-15T09:23:43.000Z",
    "updatedAt": "2016-09-22T08:55:26.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/455"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/455/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/455/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/455/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/hagen"
      },
      {
        "rel": "images",
        "href": "/dashboards/455/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/455/thumbnails"
      }
    ]
  },
  {
    "id": 2352,
    "status": 1,
    "orgId": 63813,
    "orgSlug": "pbuditi",
    "orgName": "pbuditi",
    "slug": "prometheus-demo-dashboard",
    "downloads": 19,
    "revisionId": 3090,
    "revision": 1,
    "name": "Prometheus - Demo Dashboard",
    "description": "Prometheus Board",
    "readme": "",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-05-27T19:47:23.000Z",
    "updatedAt": "2017-05-27T19:49:29.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/2352"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/2352/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/2352/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/2352/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/pbuditi"
      },
      {
        "rel": "images",
        "href": "/dashboards/2352/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/2352/thumbnails"
      }
    ]
  },
  {
    "id": 1244,
    "status": 1,
    "orgId": 12624,
    "orgSlug": "robustperception",
    "orgName": "Robust Perception",
    "slug": "prometheus-benchmark",
    "downloads": 232,
    "revisionId": 1787,
    "revision": 3,
    "name": "Prometheus Benchmark - 1.5.x",
    "description": "Metrics useful for benchmarking and loadtesting Prometheus itself. Designed primarily for Prometheus 1.5.x",
    "readme": "To use scrape the Prometheus (with job label `prometheus`) and Node Exporter (with job label `node`) on that machine every 1 second. This will provide key stats about Prometheus and machine performance.",
    "collectorType": "nodeExporter",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-12-28T21:18:29.000Z",
    "updatedAt": "2017-04-20T08:27:25.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/1244"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/1244/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/1244/revisions/3"
      },
      {
        "rel": "download",
        "href": "/dashboards/1244/revisions/3/download"
      },
      {
        "rel": "org",
        "href": "/orgs/robustperception"
      },
      {
        "rel": "images",
        "href": "/dashboards/1244/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/1244/thumbnails"
      }
    ]
  },
  {
    "id": 2078,
    "status": 1,
    "orgId": 12624,
    "orgSlug": "robustperception",
    "orgName": "Robust Perception",
    "slug": "prometheus-benchmark-1-6-x",
    "downloads": 67,
    "revisionId": 2738,
    "revision": 1,
    "name": "Prometheus Benchmark - 1.6.x",
    "description": "Metrics useful for benchmarking and loadtesting Prometheus itself. Designed primarily for Prometheus 1.6.x",
    "readme": "To use scrape the Prometheus (with job label `prometheus`) and Node Exporter (with job label `node`) on that machine every 1 second. This will provide key stats about Prometheus and machine performance.",
    "collectorType": null,
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-04-20T10:22:31.000Z",
    "updatedAt": "2017-04-20T16:24:21.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/2078"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/2078/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/2078/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/2078/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/robustperception"
      },
      {
        "rel": "images",
        "href": "/dashboards/2078/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/2078/thumbnails"
      }
    ]
  },
  {
    "id": 456,
    "status": 1,
    "orgId": 24649,
    "orgSlug": "uschtwill",
    "orgName": "uschtwill",
    "slug": "data-exploration",
    "downloads": 344,
    "revisionId": 603,
    "revision": 1,
    "name": "Prometheus Data Exploration",
    "description": "VERY simple dashboard to VERY easily view and explore Prometheus data. Just click away.",
    "readme": "Github repository: [https://github.com/uschtwill/various-dashboards](https://github.com/uschtwill/various-dashboards/blob/master/grafana/prometheus-data-exploration.json)",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-09-15T09:42:02.000Z",
    "updatedAt": "2016-12-30T14:29:39.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/456"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/456/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/456/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/456/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/uschtwill"
      },
      {
        "rel": "images",
        "href": "/dashboards/456/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/456/thumbnails"
      }
    ]
  },
  {
    "id": 37,
    "status": 1,
    "orgId": 14101,
    "orgSlug": "bergquist",
    "orgName": "Carl Bergquist",
    "slug": "prometheus-memcached",
    "downloads": 238,
    "revisionId": 46,
    "revision": 1,
    "name": "Prometheus memcached",
    "description": "Prometheus dashboard for memcached servers",
    "readme": "Dashboard for getting a complete overview of your memcached servers using prometheus and memcached_exporter.\r\n\r\n### Metrics\r\n* % Hit ratio\r\n* Current connections\r\n* Get/set command ratio\r\n* Command usage\r\n* Evict / reclaim\r\n* Network read/write\r\n* Total memory usage \r\n* Items in cache.\r\n\r\nThis dashboard is based on the metrics created by [github.com/prometheus/memcached_exporter](https://github.com/prometheus/memcached_exporter) using default flags.\r\n\r\n## Feedback\r\nComments? suggestions? Please open issues/pull requests to [https://github.com/bergquist/dashboards](https://github.com/bergquist/dashboards)",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-06-22T15:16:23.000Z",
    "updatedAt": "2016-06-27T22:11:47.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/37"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/37/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/37/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/37/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/bergquist"
      },
      {
        "rel": "images",
        "href": "/dashboards/37/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/37/thumbnails"
      }
    ]
  },
  {
    "id": 2,
    "status": 1,
    "orgId": 10001,
    "orgSlug": "admin",
    "orgName": "Raintank Admin",
    "slug": "prometheus-stats",
    "downloads": 1280,
    "revisionId": 64,
    "revision": 2,
    "name": "Prometheus Stats",
    "description": "The  official, pre-built Prometheus Stats Dashboard.",
    "readme": "This is the Prometheus dashboard that comes bundled with Grafana. You can also find it under the Dashboards tab in the Prometheus Data Source Settings and import it directly from there.\r\n\r\nHow to use the dashboard is described in [Matt Toback's blog post on How To Add a Prometheus Dashboard to Grafana](https://www.digitalocean.com/community/tutorials/how-to-add-a-prometheus-dashboard-to-grafana).\r\n\r\n### Help Make this dashboard better\r\n\r\nFor feedback and ideas to improve this dashboard please open an issue here: [https://github.com/grafana/grafana](https://github.com/grafana/grafana)",
    "collectorType": null,
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-06-09T09:08:33.000Z",
    "updatedAt": "2016-06-23T19:59:00.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/2"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/2/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/2/revisions/2"
      },
      {
        "rel": "download",
        "href": "/dashboards/2/revisions/2/download"
      },
      {
        "rel": "org",
        "href": "/orgs/admin"
      },
      {
        "rel": "images",
        "href": "/dashboards/2/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/2/thumbnails"
      }
    ]
  },
  {
    "id": 358,
    "status": 1,
    "orgId": 25767,
    "orgSlug": "lubovarganike",
    "orgName": "lubovarganike",
    "slug": "prometheus-stats",
    "downloads": 347,
    "revisionId": 487,
    "revision": 1,
    "name": "Prometheus Stats",
    "description": "The official, pre-built Prometheus Stats Dashboard, extended a bit by lubovarganike.",
    "readme": "Dashboard is extended copy of official one. Dashboard does now currently handle multiple monitored prometheuses.",
    "collectorType": null,
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-08-23T06:24:07.000Z",
    "updatedAt": "2016-08-23T06:30:01.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/358"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/358/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/358/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/358/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/lubovarganike"
      },
      {
        "rel": "images",
        "href": "/dashboards/358/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/358/thumbnails"
      }
    ]
  },
  {
    "id": 445,
    "status": 1,
    "orgId": 23094,
    "orgSlug": "ncabatoff",
    "orgName": "ncabatoff",
    "slug": "prometheus-stats-extended",
    "downloads": 565,
    "revisionId": 592,
    "revision": 1,
    "name": "Prometheus Stats Extended",
    "description": "VIew Prometheus internal metrics: an extension of the standard dashboard.  Useful for tuning, probably overkill for daily use.",
    "readme": "I created this for use with [prombench](https://github.com/ncabatoff/prombench), my Prometheus benchmark tool, but it may have more general utility.",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-09-15T01:05:42.000Z",
    "updatedAt": "2016-09-15T01:08:12.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/445"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/445/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/445/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/445/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/ncabatoff"
      },
      {
        "rel": "images",
        "href": "/dashboards/445/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/445/thumbnails"
      }
    ]
  },
  {
    "id": 159,
    "status": 1,
    "orgId": 11782,
    "orgSlug": "mcth",
    "orgName": "Thomas Cheronneau",
    "slug": "prometheus-system",
    "downloads": 1813,
    "revisionId": 201,
    "revision": 1,
    "name": "Prometheus system",
    "description": "Prometheus for system metrics. \r\nLoad, CPU, RAM, network, process ... ",
    "readme": "Show classical system metrics of your servers. \r\nIt's also linked alerts of the selected servers (if alert are set). \r\nNeed to use tag name for servers. The tag used is \"alias\" but you can change it in templating. \r\n\r\nFeel free to tell me if there is an issue. \r\n",
    "collectorType": "nodeExporter",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-07-12T19:45:48.000Z",
    "updatedAt": "2017-03-14T11:11:50.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/159"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/159/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/159/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/159/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/mcth"
      },
      {
        "rel": "images",
        "href": "/dashboards/159/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/159/thumbnails"
      }
    ]
  },
  {
    "id": 2485,
    "status": 1,
    "orgId": 67456,
    "orgSlug": "arman",
    "orgName": "arman",
    "slug": "falconmonitorreconstructued",
    "downloads": 7,
    "revisionId": 3349,
    "revision": 1,
    "name": "PrometheusServerMonitor",
    "description": "A basic monitoring dashboard for a prometheus server",
    "readme": "",
    "collectorType": "nodeExporter",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-06-19T21:52:31.000Z",
    "updatedAt": "2017-06-19T21:56:21.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/2485"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/2485/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/2485/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/2485/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/arman"
      },
      {
        "rel": "images",
        "href": "/dashboards/2485/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/2485/thumbnails"
      }
    ]
  },
  {
    "id": 700,
    "status": 1,
    "orgId": 32845,
    "orgSlug": "roidelapluie",
    "orgName": "roidelapluie",
    "slug": "puppet-report",
    "downloads": 116,
    "revisionId": 970,
    "revision": 2,
    "name": "Puppet Report",
    "description": "Detailed information about Puppet report metrics",
    "readme": "# Grafana Puppet dashboard\r\n\r\nDeep dive one node's Puppet reports.\r\n\r\n\r\nThis dashboard is meant to be used with the Puppet\r\n[prometheus_reporter](https://github.com/voxpupuli/puppet-prometheus_reporter)\r\n\r\nDeep dive one node's Puppet reports\r\n\r\n## Contributors\r\n\r\n[See Github](https://github.com/voxpupuli/grafana-dashboards-puppet-prometheus/graphs/contributors).\r\n\r\nSpecial thanks to [Vox Pupuli](https://voxpupuli.org) to provide a platform\r\nthat allows us to develop of the dashboards.\r\n\r\n## Copyright and License\r\n\r\nCopyright © 2016 [Multiple contributors][mc]\r\n\r\n[mc]:https://github.com/voxpupuli/grafana-dashboards-puppet-prometheus/graphs/contributors\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.",
    "collectorType": "nodeExporter",
    "collectorConfig": "### Puppet & Prometheus setup\r\n\r\nSee [prometheus_reporter](https://github.com/voxpupuli/puppet-prometheus_reporter)\r\n\r\n### Grafana\r\n\r\nThe dashboards expects a datasource called Prometheus (in line with\r\n[percona/grafana-dashboards](https://github.com/percona/grafana-dashboards)\r\nrecommendations).",
    "collectorPluginList": "textfile",
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-10-21T09:34:48.000Z",
    "updatedAt": "2016-10-21T13:18:17.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/700"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/700/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/700/revisions/2"
      },
      {
        "rel": "download",
        "href": "/dashboards/700/revisions/2/download"
      },
      {
        "rel": "org",
        "href": "/orgs/roidelapluie"
      },
      {
        "rel": "images",
        "href": "/dashboards/700/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/700/thumbnails"
      }
    ]
  },
  {
    "id": 2121,
    "status": 1,
    "orgId": 58173,
    "orgSlug": "naviens",
    "orgName": "naviens",
    "slug": "rabbitmq-metrics",
    "downloads": 101,
    "revisionId": 2790,
    "revision": 1,
    "name": "RabbitMQ Metrics",
    "description": "Basic rabbitmq host stats: Node Stats, Exchanges, Channels, Consumers,  Connections, Queues, Messages, Messages per Queue, Memory, File Descriptors, Sockets.",
    "readme": "Metrics from rabbitmq_exporter for prometheus.\r\n\r\nCollector Configuration,\r\nThis dashboard uses metrics from rabbitmq_exporter for prometheus. Refer below url for collector configuration.\r\nhttps://github.com/kbudde/rabbitmq_exporter",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-04-27T07:24:54.000Z",
    "updatedAt": "2017-04-27T07:41:54.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/2121"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/2121/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/2121/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/2121/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/naviens"
      },
      {
        "rel": "images",
        "href": "/dashboards/2121/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/2121/thumbnails"
      }
    ]
  },
  {
    "id": 1674,
    "status": 1,
    "orgId": 11782,
    "orgSlug": "mcth",
    "orgName": "Thomas Cheronneau",
    "slug": "rancher",
    "downloads": 78,
    "revisionId": 2241,
    "revision": 1,
    "name": "Rancher",
    "description": "Prometheus Rancher Exporter",
    "readme": "Rancher Exporter templating for Rancher Stack/Host/Service. \r\nGet host state. Get Stack/Service Health (OK/NOK). ",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-03-14T09:24:13.000Z",
    "updatedAt": "2017-03-14T09:26:27.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/1674"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/1674/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/1674/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/1674/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/mcth"
      },
      {
        "rel": "images",
        "href": "/dashboards/1674/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/1674/thumbnails"
      }
    ]
  },
  {
    "id": 1485,
    "status": 1,
    "orgId": 45123,
    "orgSlug": "jcrouzet",
    "orgName": "jcrouzet",
    "slug": "restify",
    "downloads": 41,
    "revisionId": 1974,
    "revision": 1,
    "name": "Restify",
    "description": "Restify metrics",
    "readme": "",
    "collectorType": null,
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-02-10T22:00:14.000Z",
    "updatedAt": "2017-02-10T22:09:30.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/1485"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/1485/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/1485/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/1485/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/jcrouzet"
      },
      {
        "rel": "images",
        "href": "/dashboards/1485/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/1485/thumbnails"
      }
    ]
  },
  {
    "id": 210,
    "status": 1,
    "orgId": 23295,
    "orgSlug": "robustirc",
    "orgName": "robustirc",
    "slug": "robustirc",
    "downloads": 24,
    "revisionId": 276,
    "revision": 1,
    "name": "RobustIRC",
    "description": "Dashboard for https://robustirc.net/",
    "readme": "This dashboards shows the basic SLA metrics for a [RobustIRC](https://robustirc.net/) installation, i.e. network availability, raft leader and committed messages/s. Further, the following sections are displayed:\r\n\r\n* basic process metrics (uptime, RSS, CPU seconds/s, availability)\r\n* Raft metrics (heartbeat latency, commit time, incoming/outgoing RPCs/s)\r\n* IRC metrics (number of sessions, top commands)\r\n\r\nSee also [robustirc/contrib/prometheus](https://github.com/robustirc/robustirc/tree/master/contrib/prometheus) for the corresponding Prometheus config.",
    "collectorType": null,
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-07-18T17:17:57.000Z",
    "updatedAt": "2016-07-18T17:18:31.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/210"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/210/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/210/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/210/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/robustirc"
      },
      {
        "rel": "images",
        "href": "/dashboards/210/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/210/thumbnails"
      }
    ]
  },
  {
    "id": 237,
    "status": 1,
    "orgId": 23094,
    "orgSlug": "ncabatoff",
    "orgName": "ncabatoff",
    "slug": "sensors",
    "downloads": 291,
    "revisionId": 309,
    "revision": 1,
    "name": "Sensors",
    "description": "Dashboard for detailed view of metrics from https://github.com/ncabatoff/sensor-exporter",
    "readme": "This dashboard shows everything currently published by sensor-exporter, namely various lm-sensors metrics (CPU temperature, fan speeds, etc) and hddtemp metrics (SMART hard disk temperature metrics). It also has some panels for monitoring the health of sensor-exporter itself.\r\n\r\nThis dashboard is more for my sake when I'm debugging issues with sensor-exporter.  Most users will only care about one or two panels of this dashboard, and will probably want them in their main system health dashboard.",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-07-23T21:52:50.000Z",
    "updatedAt": "2016-07-23T21:56:40.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/237"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/237/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/237/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/237/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/ncabatoff"
      },
      {
        "rel": "images",
        "href": "/dashboards/237/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/237/thumbnails"
      }
    ]
  },
  {
    "id": 854,
    "status": 1,
    "orgId": 35327,
    "orgSlug": "glehmann",
    "orgName": "glehmann",
    "slug": "simple-prometheus-node-exporter",
    "downloads": 235,
    "revisionId": 1391,
    "revision": 5,
    "name": "Simple Prometheus Node Exporter",
    "description": "",
    "readme": "",
    "collectorType": "nodeExporter",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-11-14T13:44:28.000Z",
    "updatedAt": "2016-11-27T07:40:37.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/854"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/854/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/854/revisions/5"
      },
      {
        "rel": "download",
        "href": "/dashboards/854/revisions/5/download"
      },
      {
        "rel": "org",
        "href": "/orgs/glehmann"
      },
      {
        "rel": "images",
        "href": "/dashboards/854/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/854/thumbnails"
      }
    ]
  },
  {
    "id": 1124,
    "status": 1,
    "orgId": 12624,
    "orgSlug": "robustperception",
    "orgName": "Robust Perception",
    "slug": "snmp-interface-throughput",
    "downloads": 518,
    "revisionId": 3401,
    "revision": 3,
    "name": "SNMP Interface Throughput",
    "description": "",
    "readme": " See [https://www.robustperception.io/snmp-monitoring-with-prometheus/](https://www.robustperception.io/snmp-monitoring-with-prometheus) for how to configure Prometheus with the SNMP exporter.",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-12-09T13:05:08.000Z",
    "updatedAt": "2017-06-26T15:10:12.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/1124"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/1124/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/1124/revisions/3"
      },
      {
        "rel": "download",
        "href": "/dashboards/1124/revisions/3/download"
      },
      {
        "rel": "org",
        "href": "/orgs/robustperception"
      },
      {
        "rel": "images",
        "href": "/dashboards/1124/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/1124/thumbnails"
      }
    ]
  },
  {
    "id": 2551,
    "status": 1,
    "orgId": 69979,
    "orgSlug": "noony",
    "orgName": "Thomas Colomb",
    "slug": "solr-prometheus",
    "downloads": 1,
    "revisionId": 3439,
    "revision": 1,
    "name": "Solr",
    "description": "Solr metrics",
    "readme": "",
    "collectorType": null,
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-06-29T08:50:58.000Z",
    "updatedAt": "2017-06-29T09:03:15.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/2551"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/2551/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/2551/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/2551/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/noony"
      },
      {
        "rel": "images",
        "href": "/dashboards/2551/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/2551/thumbnails"
      }
    ]
  },
  {
    "id": 2471,
    "status": 1,
    "orgId": 67160,
    "orgSlug": "marcingrzejszczak",
    "orgName": "marcingrzejszczak",
    "slug": "demo",
    "downloads": 6,
    "revisionId": 3329,
    "revision": 1,
    "name": "Spring Cloud Pipelines Demo",
    "description": "Demo for the Spring Cloud Pipelines project. Bases on what's going on with https://github.com/spring-cloud-samples/github-analytics/",
    "readme": "Dashboard used for the [Spring Cloud Pipelines](http://cloud.spring.io/spring-cloud-pipelines/spring-cloud-pipelines.html) demo",
    "collectorType": null,
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-06-14T14:53:06.000Z",
    "updatedAt": "2017-06-14T14:54:37.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/2471"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/2471/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/2471/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/2471/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/marcingrzejszczak"
      },
      {
        "rel": "images",
        "href": "/dashboards/2471/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/2471/thumbnails"
      }
    ]
  },
  {
    "id": 1883,
    "status": 1,
    "orgId": 20858,
    "orgSlug": "mefraimsson",
    "orgName": "Marcus Efraimsson",
    "slug": "telegraf-sql-server-monitoring",
    "downloads": 81,
    "revisionId": 2510,
    "revision": 1,
    "name": "SQL Server Monitoring",
    "description": "Performance and health metrics for your SQL Servers using Telegraf and Prometheus",
    "readme": "This is a Telegraf/Prometheus version of the [Telegraf/InfluxDB SQL Server Monitoring dashboard](https://grafana.com/dashboards/409). Please see link for more screenshots etc.",
    "collectorType": "Telegraf",
    "collectorConfig": "You'll need the [Telegraf SQL Server plugin](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/sqlserver) together with the [Telegraf Prometheus plugin](https://github.com/influxdata/telegraf/tree/master/plugins/outputs/prometheus_client).",
    "collectorPluginList": "sql server, prometheus",
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-04-05T22:49:45.000Z",
    "updatedAt": "2017-04-05T23:22:36.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/1883"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/1883/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/1883/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/1883/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/mefraimsson"
      },
      {
        "rel": "images",
        "href": "/dashboards/1883/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/1883/thumbnails"
      }
    ]
  },
  {
    "id": 2160,
    "status": 1,
    "orgId": 43183,
    "orgSlug": "galexrt",
    "orgName": "galexrt",
    "slug": "srcds-exporter-player-info",
    "downloads": 4,
    "revisionId": 2841,
    "revision": 1,
    "name": "srcds_exporter - Player Info",
    "description": "Shows per player info like ping, loss and on which server the user currently is.",
    "readme": "This is a dashboard for the [galexrt/srcds_exporter](https://github.com/galexrt/srcds_exporter).",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-05-02T15:02:34.000Z",
    "updatedAt": "2017-05-02T15:05:50.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/2160"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/2160/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/2160/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/2160/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/galexrt"
      },
      {
        "rel": "images",
        "href": "/dashboards/2160/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/2160/thumbnails"
      }
    ]
  },
  {
    "id": 2157,
    "status": 1,
    "orgId": 43183,
    "orgSlug": "galexrt",
    "orgName": "galexrt",
    "slug": "srcds-exporter-server-overview",
    "downloads": 3,
    "revisionId": 2838,
    "revision": 1,
    "name": "srcds_exporter - Server Overview",
    "description": "Shows global server information like ping, loss and players by Steam ID on each server.",
    "readme": "This is a dashboard for the [galexrt/srcds_exporter](https://github.com/galexrt/srcds_exporter).",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-05-02T15:01:49.000Z",
    "updatedAt": "2017-05-02T15:02:19.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/2157"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/2157/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/2157/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/2157/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/galexrt"
      },
      {
        "rel": "images",
        "href": "/dashboards/2157/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/2157/thumbnails"
      }
    ]
  },
  {
    "id": 2304,
    "status": 1,
    "orgId": 59541,
    "orgSlug": "thomasr",
    "orgName": "thomasr",
    "slug": "synse",
    "downloads": 3,
    "revisionId": 3048,
    "revision": 1,
    "name": "Synse",
    "description": "Sensor Dashboard",
    "readme": "",
    "collectorType": null,
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-05-22T15:46:42.000Z",
    "updatedAt": "2017-05-22T15:49:59.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/2304"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/2304/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/2304/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/2304/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/thomasr"
      },
      {
        "rel": "images",
        "href": "/dashboards/2304/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/2304/thumbnails"
      }
    ]
  },
  {
    "id": 1617,
    "status": 1,
    "orgId": 43183,
    "orgSlug": "galexrt",
    "orgName": "galexrt",
    "slug": "systemd-service-dashboard",
    "downloads": 106,
    "revisionId": 2172,
    "revision": 1,
    "name": "Systemd Service Dashboard",
    "description": "Show stats from node_exporter systemd collector.",
    "readme": "## Requirements\r\n* A Prometheus datasource\r\n* node_exporter with systemd collector enabled",
    "collectorType": "nodeExporter",
    "collectorConfig": null,
    "collectorPluginList": "systemd",
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-02-28T17:04:57.000Z",
    "updatedAt": "2017-02-28T17:06:19.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/1617"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/1617/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/1617/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/1617/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/galexrt"
      },
      {
        "rel": "images",
        "href": "/dashboards/1617/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/1617/thumbnails"
      }
    ]
  },
  {
    "id": 1489,
    "status": 1,
    "orgId": 45337,
    "orgSlug": "tennix",
    "orgName": "tennix",
    "slug": "tidb-cluster-pd",
    "downloads": 34,
    "revisionId": 2420,
    "revision": 4,
    "name": "TiDB Cluster - pd",
    "description": "",
    "readme": "For how to monitor PD, read [tidb-monitoring-guide](https://github.com/pingcap/docs/blob/master/op-guide/monitoring-tidb.md).",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-02-13T10:06:51.000Z",
    "updatedAt": "2017-03-30T11:14:33.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/1489"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/1489/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/1489/revisions/4"
      },
      {
        "rel": "download",
        "href": "/dashboards/1489/revisions/4/download"
      },
      {
        "rel": "org",
        "href": "/orgs/tennix"
      },
      {
        "rel": "images",
        "href": "/dashboards/1489/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/1489/thumbnails"
      }
    ]
  },
  {
    "id": 2037,
    "status": 1,
    "orgId": 56289,
    "orgSlug": "tidb",
    "orgName": "PingCAP",
    "slug": "tidb-cluster-pd",
    "downloads": 43,
    "revisionId": 3431,
    "revision": 4,
    "name": "TiDB Cluster - pd",
    "description": "",
    "readme": "For how to monitor PD, read [tidb-monitoring-guide](https://github.com/pingcap/docs/blob/master/op-guide/monitoring-tidb.md).",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-04-17T07:07:10.000Z",
    "updatedAt": "2017-06-29T03:06:44.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/2037"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/2037/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/2037/revisions/4"
      },
      {
        "rel": "download",
        "href": "/dashboards/2037/revisions/4/download"
      },
      {
        "rel": "org",
        "href": "/orgs/tidb"
      },
      {
        "rel": "images",
        "href": "/dashboards/2037/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/2037/thumbnails"
      }
    ]
  },
  {
    "id": 1495,
    "status": 1,
    "orgId": 45337,
    "orgSlug": "tennix",
    "orgName": "tennix",
    "slug": "tidb-cluster-tidb",
    "downloads": 33,
    "revisionId": 2423,
    "revision": 3,
    "name": "TiDB Cluster - tidb",
    "description": "",
    "readme": "For how to monitor TiDB, read [tidb-monitoring-guide](https://github.com/pingcap/docs/blob/master/op-guide/monitoring-tidb.md).",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-02-13T10:22:22.000Z",
    "updatedAt": "2017-03-30T11:22:34.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/1495"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/1495/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/1495/revisions/3"
      },
      {
        "rel": "download",
        "href": "/dashboards/1495/revisions/3/download"
      },
      {
        "rel": "org",
        "href": "/orgs/tennix"
      },
      {
        "rel": "images",
        "href": "/dashboards/1495/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/1495/thumbnails"
      }
    ]
  },
  {
    "id": 2040,
    "status": 1,
    "orgId": 56289,
    "orgSlug": "tidb",
    "orgName": "PingCAP",
    "slug": "tidb-cluster-tidb",
    "downloads": 47,
    "revisionId": 3428,
    "revision": 4,
    "name": "TiDB Cluster - tidb",
    "description": "",
    "readme": "For how to monitor TiDB, read [tidb-monitoring-guide](https://github.com/pingcap/docs/blob/master/op-guide/monitoring-tidb.md).",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-04-17T07:29:16.000Z",
    "updatedAt": "2017-06-29T03:06:08.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/2040"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/2040/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/2040/revisions/4"
      },
      {
        "rel": "download",
        "href": "/dashboards/2040/revisions/4/download"
      },
      {
        "rel": "org",
        "href": "/orgs/tidb"
      },
      {
        "rel": "images",
        "href": "/dashboards/2040/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/2040/thumbnails"
      }
    ]
  },
  {
    "id": 2043,
    "status": 1,
    "orgId": 56289,
    "orgSlug": "tidb",
    "orgName": "PingCAP",
    "slug": "tidb-cluster-tikv",
    "downloads": 42,
    "revisionId": 3437,
    "revision": 5,
    "name": "TiDB Cluster - tikv",
    "description": "",
    "readme": "For how to monitor TiDB, read [tidb-monitoring-guide](https://github.com/pingcap/docs/blob/master/op-guide/monitoring-tidb.md).",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-04-17T07:30:57.000Z",
    "updatedAt": "2017-06-29T03:50:29.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/2043"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/2043/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/2043/revisions/5"
      },
      {
        "rel": "download",
        "href": "/dashboards/2043/revisions/5/download"
      },
      {
        "rel": "org",
        "href": "/orgs/tidb"
      },
      {
        "rel": "images",
        "href": "/dashboards/2043/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/2043/thumbnails"
      }
    ]
  },
  {
    "id": 1492,
    "status": 1,
    "orgId": 45337,
    "orgSlug": "tennix",
    "orgName": "tennix",
    "slug": "tidb-tikv",
    "downloads": 60,
    "revisionId": 2345,
    "revision": 8,
    "name": "TiDB-TiKV",
    "description": "",
    "readme": "For how to monitor TiKV, read [tidb-monitoring-guide](https://github.com/pingcap/docs/blob/master/op-guide/monitoring-tidb.md).",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-02-13T10:17:23.000Z",
    "updatedAt": "2017-03-25T07:11:21.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/1492"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/1492/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/1492/revisions/8"
      },
      {
        "rel": "download",
        "href": "/dashboards/1492/revisions/8/download"
      },
      {
        "rel": "org",
        "href": "/orgs/tennix"
      },
      {
        "rel": "images",
        "href": "/dashboards/1492/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/1492/thumbnails"
      }
    ]
  },
  {
    "id": 2240,
    "status": 1,
    "orgId": 60305,
    "orgSlug": "macros",
    "orgName": "macros",
    "slug": "traefik-realtime-stats",
    "downloads": 34,
    "revisionId": 2927,
    "revision": 2,
    "name": "Traefik  Realtime Stats",
    "description": "Visualize Traefik Health Metrics",
    "readme": " - First, you would need to start your traefik instance with these parameters:\r\n```traefik --web.metrics --web.metrics.prometheus```\r\n- Then you would need to make Prometheus aware of this endpoint.\r\nSince I run traefik in a Docker Swarm, I used it's DNS capabilities to discover my traefik instance launched as a service called \"load-balancer\".\r\n\r\n*(Please note the dashboard relies on it to get some stats, so you may need to edit the JSON if your service name is different)*\r\n\r\nHere is the Prometheus config snippet I use (8080 is the web port traefik is listening, can be configured by adding --web.address=:8080 to traefik):\r\n\r\n```\r\n- job_name: 'load-balancer'\r\n    dns_sd_configs:\r\n    - names:\r\n      - 'tasks.load-balancer'\r\n      type: 'A'\r\n      port: 8080\r\n```",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-05-09T13:01:05.000Z",
    "updatedAt": "2017-05-09T14:48:45.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/2240"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/2240/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/2240/revisions/2"
      },
      {
        "rel": "download",
        "href": "/dashboards/2240/revisions/2/download"
      },
      {
        "rel": "org",
        "href": "/orgs/macros"
      },
      {
        "rel": "images",
        "href": "/dashboards/2240/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/2240/thumbnails"
      }
    ]
  },
  {
    "id": 1798,
    "status": 1,
    "orgId": 48275,
    "orgSlug": "soyhuce",
    "orgName": "SoyHuCe",
    "slug": "traefik-stats",
    "downloads": 45,
    "revisionId": 2401,
    "revision": 3,
    "name": "Traefik Stats",
    "description": "Visualize Traefik Health Metrics",
    "readme": "The dashboard provides the following;\r\nUptime, Total Status Code Count, Average response time.\r\n\r\nYou must enable Prometheus metrics exporter in Traefik configurations. [https://docs.traefik.io/](https://docs.traefik.io/)\r\n\r\nFeeback\r\n\r\n[https://github.com/Soyhuce/grafana-dashboards](https://github.com/Soyhuce/grafana-dashboards)",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-03-29T13:15:52.000Z",
    "updatedAt": "2017-03-29T15:27:30.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/1798"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/1798/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/1798/revisions/3"
      },
      {
        "rel": "download",
        "href": "/dashboards/1798/revisions/3/download"
      },
      {
        "rel": "org",
        "href": "/orgs/soyhuce"
      },
      {
        "rel": "images",
        "href": "/dashboards/1798/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/1798/thumbnails"
      }
    ]
  },
  {
    "id": 637,
    "status": 1,
    "orgId": 27274,
    "orgSlug": "evryfs",
    "orgName": "evryFs",
    "slug": "vm-dashboard",
    "downloads": 145,
    "revisionId": 880,
    "revision": 1,
    "name": "VM dashboard",
    "description": "using prometheus simpleclient hotspot to gather metrics.\r\ntemplated per job (all instances)\r\none graph for threads, one for memory",
    "readme": "using prometheus simpleclient hotspot to gather metrics.\r\nTemplated per job (all instances).\r\nOne graph for threads, one for memory.",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-10-14T09:39:08.000Z",
    "updatedAt": "2016-10-14T09:41:52.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/637"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/637/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/637/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/637/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/evryfs"
      },
      {
        "rel": "images",
        "href": "/dashboards/637/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/637/thumbnails"
      }
    ]
  },
  {
    "id": 2441,
    "status": 1,
    "orgId": 66482,
    "orgSlug": "celliott",
    "orgName": "celliott",
    "slug": "weather",
    "downloads": 11,
    "revisionId": 3338,
    "revision": 13,
    "name": "Weather",
    "description": "A dashboard for weather_exporter",
    "readme": "This dashboard is to be used with [weather_exporter](https://github.com/celliott/weather_exporter); which  scrapes forecast.io for current weather from a list of cities. \r\n\r\nPowered by Dark Sky!",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-06-11T17:28:11.000Z",
    "updatedAt": "2017-06-17T16:20:22.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/2441"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/2441/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/2441/revisions/13"
      },
      {
        "rel": "download",
        "href": "/dashboards/2441/revisions/13/download"
      },
      {
        "rel": "org",
        "href": "/orgs/celliott"
      },
      {
        "rel": "images",
        "href": "/dashboards/2441/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/2441/thumbnails"
      }
    ]
  },
  {
    "id": 2129,
    "status": 1,
    "orgId": 58514,
    "orgSlug": "ecto",
    "orgName": "ecto",
    "slug": "windows-node",
    "downloads": 122,
    "revisionId": 2810,
    "revision": 3,
    "name": "Windows Node",
    "description": "General stats dashboard with node selector, uses metrics from wmi_exporter",
    "readme": "Uses metrics from https://github.com/martinlindhe/wmi_exporter\r\n\r\nFeatures:\r\n* Node selector\r\n* Summary CPU load\r\n* Memory stats\r\n* Network load\r\n* Hard disks usage\r\n* Service state summary\r\n\r\nPrometheus config:\r\n\r\n```\r\n\r\n  - job_name: 'win-exporter'\r\n    static_configs:\r\n      - targets: ['192.168.0.1:9182']\r\n\r\n```\r\n\r\n`192.168.0.1` - Windows node where wmi_exporter is installed\r\n\r\nUse `['192.168.0.1:9182', '192.168.0.2:9182']` for multiple hosts\r\n\r\n",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-04-28T15:59:01.000Z",
    "updatedAt": "2017-04-28T17:47:25.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/2129"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/2129/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/2129/revisions/3"
      },
      {
        "rel": "download",
        "href": "/dashboards/2129/revisions/3/download"
      },
      {
        "rel": "org",
        "href": "/orgs/ecto"
      },
      {
        "rel": "images",
        "href": "/dashboards/2129/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/2129/thumbnails"
      }
    ]
  },
  {
    "id": 328,
    "status": 1,
    "orgId": 23094,
    "orgSlug": "ncabatoff",
    "orgName": "ncabatoff",
    "slug": "zfs",
    "downloads": 219,
    "revisionId": 433,
    "revision": 1,
    "name": "ZFS",
    "description": "ZFS Zpool metrics as produced by https://github.com/ncabatoff/zfs-exporter",
    "readme": "Metrics displayed include zpool status and state, errors, op/byte rate, and space available.",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2016-08-14T20:35:20.000Z",
    "updatedAt": "2016-08-14T20:44:06.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/328"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/328/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/328/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/328/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/ncabatoff"
      },
      {
        "rel": "images",
        "href": "/dashboards/328/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/328/thumbnails"
      }
    ]
  },
  {
    "id": 1598,
    "status": 1,
    "orgId": 47264,
    "orgSlug": "openzipkin",
    "orgName": "openzipkin",
    "slug": "zipkin-prometheus",
    "downloads": 53,
    "revisionId": 3281,
    "revision": 5,
    "name": "Zipkin / Prometheus",
    "description": "Visualize Prometheus metrics exported by OpenZipkin (http://zipkin.io/).",
    "readme": "Dashboard visualizing operational metrics of OpenZipkin. Some relabeling rules in Prometheus are required; refer to [prometheus.yml](https://github.com/openzipkin/docker-zipkin/blob/64d5f66807ee5a43bbb3e18ada570317406bb1a5/prometheus/prometheus.yml) in [`docker-zipkin`](https://github.com/openzipkin/docker-zipkin).",
    "collectorType": "Other",
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-02-27T19:40:59.000Z",
    "updatedAt": "2017-06-12T11:05:01.000Z",
    "isEditor": false,
    "hasLogo": true,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/1598"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/1598/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/1598/revisions/5"
      },
      {
        "rel": "download",
        "href": "/dashboards/1598/revisions/5/download"
      },
      {
        "rel": "org",
        "href": "/orgs/openzipkin"
      },
      {
        "rel": "images",
        "href": "/dashboards/1598/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/1598/thumbnails"
      }
    ]
  },
  {
    "id": 1965,
    "status": 1,
    "orgId": 54141,
    "orgSlug": "davygeek",
    "orgName": "davygeek",
    "slug": "",
    "downloads": 8,
    "revisionId": 2616,
    "revision": 1,
    "name": "弹性数据库告警",
    "description": "弹性数据库告警",
    "readme": "",
    "collectorType": null,
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-04-12T03:15:45.000Z",
    "updatedAt": "2017-04-12T03:16:20.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/1965"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/1965/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/1965/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/1965/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/davygeek"
      },
      {
        "rel": "images",
        "href": "/dashboards/1965/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/1965/thumbnails"
      }
    ]
  },
  {
    "id": 1968,
    "status": 1,
    "orgId": 54141,
    "orgSlug": "davygeek",
    "orgName": "davygeek",
    "slug": "",
    "downloads": 10,
    "revisionId": 2619,
    "revision": 1,
    "name": "弹性数据库网关告警",
    "description": "弹性数据库网关告警",
    "readme": "",
    "collectorType": null,
    "collectorConfig": null,
    "collectorPluginList": null,
    "datasource": "Prometheus",
    "privacy": "public",
    "createdAt": "2017-04-12T03:16:38.000Z",
    "updatedAt": "2017-04-12T03:16:51.000Z",
    "isEditor": false,
    "hasLogo": false,
    "links": [
      {
        "rel": "self",
        "href": "/dashboards/1968"
      },
      {
        "rel": "revisions",
        "href": "/dashboards/1968/revisions"
      },
      {
        "rel": "revision",
        "href": "/dashboards/1968/revisions/1"
      },
      {
        "rel": "download",
        "href": "/dashboards/1968/revisions/1/download"
      },
      {
        "rel": "org",
        "href": "/orgs/davygeek"
      },
      {
        "rel": "images",
        "href": "/dashboards/1968/images"
      },
      {
        "rel": "thumbnails",
        "href": "/dashboards/1968/thumbnails"
      }
    ]
  }
]
